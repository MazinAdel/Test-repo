
lec2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000152e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000152e  000015c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800070  00800070  000015d2  2**0
                  ALLOC
  3 .stab         00003930  00000000  00000000  000015d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b17  00000000  00000000  00004f04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 ca 01 	jmp	0x394	; 0x394 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_10>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <main>
      8a:	0c 94 95 0a 	jmp	0x152a	; 0x152a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <M_Timer_1_void_Init>:
static void (*Timer_1_ICU_CallBack) (void)=NULL;

void M_Timer_1_void_Init(void)
{
	//step 1: config Timer in normal mode
	CLR_BIT(TCCR1A_REG,WGM11_BIT);
      92:	ef e4       	ldi	r30, 0x4F	; 79
      94:	f0 e0       	ldi	r31, 0x00	; 0
      96:	80 81       	ld	r24, Z
      98:	8d 7f       	andi	r24, 0xFD	; 253
      9a:	80 83       	st	Z, r24
	CLR_BIT(TCCR1A_REG,WGM10_BIT);
      9c:	80 81       	ld	r24, Z
      9e:	8e 7f       	andi	r24, 0xFE	; 254
      a0:	80 83       	st	Z, r24
	CLR_BIT(TCCR1B_REG,WGM13_BIT);
      a2:	ee e4       	ldi	r30, 0x4E	; 78
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	8f 7e       	andi	r24, 0xEF	; 239
      aa:	80 83       	st	Z, r24
	CLR_BIT(TCCR1B_REG,WGM12_BIT);
      ac:	80 81       	ld	r24, Z
      ae:	87 7f       	andi	r24, 0xF7	; 247
      b0:	80 83       	st	Z, r24

	//step 2: config Timer prescaler

	SET_BIT(TCCR1B_REG,CS12_BIT);
      b2:	80 81       	ld	r24, Z
      b4:	84 60       	ori	r24, 0x04	; 4
      b6:	80 83       	st	Z, r24
	CLR_BIT(TCCR1B_REG,CS11_BIT);
      b8:	80 81       	ld	r24, Z
      ba:	8d 7f       	andi	r24, 0xFD	; 253
      bc:	80 83       	st	Z, r24
	CLR_BIT(TCCR1B_REG,CS10_BIT);
      be:	80 81       	ld	r24, Z
      c0:	8e 7f       	andi	r24, 0xFE	; 254
      c2:	80 83       	st	Z, r24
}
      c4:	08 95       	ret

000000c6 <M_Timer_1_void_ICU_SetCallBack>:
	//SET_BIT(TCCR1B_REG,ICES1_BIT);

}
void M_Timer_1_void_ICU_SetCallBack( void (*Copy_Ptr) (void) )
{
	Timer_1_ICU_CallBack = Copy_Ptr;
      c6:	90 93 71 00 	sts	0x0071, r25
      ca:	80 93 70 00 	sts	0x0070, r24

}
      ce:	08 95       	ret

000000d0 <M_Timer_1_void_ICU_IntEnable>:
void M_Timer_1_void_ICU_IntEnable(void)
{
	SET_BIT(TIMSK_REG,TICIE1_BIT);
      d0:	e9 e5       	ldi	r30, 0x59	; 89
      d2:	f0 e0       	ldi	r31, 0x00	; 0
      d4:	80 81       	ld	r24, Z
      d6:	80 62       	ori	r24, 0x20	; 32
      d8:	80 83       	st	Z, r24
}
      da:	08 95       	ret

000000dc <M_Timer_1_void_ICU_IntDisable>:
void M_Timer_1_void_ICU_IntDisable(void)
{
	CLR_BIT(TIMSK_REG,TICIE1_BIT);
      dc:	e9 e5       	ldi	r30, 0x59	; 89
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	80 81       	ld	r24, Z
      e2:	8f 7d       	andi	r24, 0xDF	; 223
      e4:	80 83       	st	Z, r24
}
      e6:	08 95       	ret

000000e8 <M_Timer_1_u16_ICU_InputRead>:
u16 M_Timer_1_u16_ICU_InputRead(void)
{

	return ICR1_REG;
      e8:	26 b5       	in	r18, 0x26	; 38
      ea:	37 b5       	in	r19, 0x27	; 39
}
      ec:	82 2f       	mov	r24, r18
      ee:	93 2f       	mov	r25, r19
      f0:	08 95       	ret

000000f2 <M_Timer_1_void_ICU_SetTrigger>:


void M_Timer_1_void_ICU_SetTrigger(u8 Copy_u8_Trigger)
{
	switch(Copy_u8_Trigger)
      f2:	88 23       	and	r24, r24
      f4:	41 f0       	breq	.+16     	; 0x106 <M_Timer_1_void_ICU_SetTrigger+0x14>
      f6:	81 30       	cpi	r24, 0x01	; 1
      f8:	59 f4       	brne	.+22     	; 0x110 <M_Timer_1_void_ICU_SetTrigger+0x1e>
	{
	case TIMER_1_ICU_RISING_TRIGG:
		SET_BIT(TCCR1B_REG,ICES1_BIT);
      fa:	ee e4       	ldi	r30, 0x4E	; 78
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	80 81       	ld	r24, Z
     100:	80 64       	ori	r24, 0x40	; 64
     102:	80 83       	st	Z, r24
     104:	08 95       	ret
	break;
	case TIMER_1_ICU_FALLING_TRIGG:
		CLR_BIT(TCCR1B_REG,ICES1_BIT);
     106:	ee e4       	ldi	r30, 0x4E	; 78
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	8f 7b       	andi	r24, 0xBF	; 191
     10e:	80 83       	st	Z, r24
     110:	08 95       	ret

00000112 <M_Timer_1_void_ICU_Init>:
	CLR_BIT(TCCR1B_REG,CS10_BIT);
}
void M_Timer_1_void_ICU_Init(void)
{
	// set trigger as rising edge
	M_Timer_1_void_ICU_SetTrigger(TIMER_1_ICU_RISING_TRIGG);
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	0e 94 79 00 	call	0xf2	; 0xf2 <M_Timer_1_void_ICU_SetTrigger>
	//SET_BIT(TCCR1B_REG,ICES1_BIT);

}
     118:	08 95       	ret

0000011a <__vector_6>:
	*/
}


ISR(TIMER1_CAPT_vect)
{
     11a:	1f 92       	push	r1
     11c:	0f 92       	push	r0
     11e:	0f b6       	in	r0, 0x3f	; 63
     120:	0f 92       	push	r0
     122:	11 24       	eor	r1, r1
     124:	2f 93       	push	r18
     126:	3f 93       	push	r19
     128:	4f 93       	push	r20
     12a:	5f 93       	push	r21
     12c:	6f 93       	push	r22
     12e:	7f 93       	push	r23
     130:	8f 93       	push	r24
     132:	9f 93       	push	r25
     134:	af 93       	push	r26
     136:	bf 93       	push	r27
     138:	ef 93       	push	r30
     13a:	ff 93       	push	r31
	Timer_1_ICU_CallBack();
     13c:	e0 91 70 00 	lds	r30, 0x0070
     140:	f0 91 71 00 	lds	r31, 0x0071
     144:	09 95       	icall
}
     146:	ff 91       	pop	r31
     148:	ef 91       	pop	r30
     14a:	bf 91       	pop	r27
     14c:	af 91       	pop	r26
     14e:	9f 91       	pop	r25
     150:	8f 91       	pop	r24
     152:	7f 91       	pop	r23
     154:	6f 91       	pop	r22
     156:	5f 91       	pop	r21
     158:	4f 91       	pop	r20
     15a:	3f 91       	pop	r19
     15c:	2f 91       	pop	r18
     15e:	0f 90       	pop	r0
     160:	0f be       	out	0x3f, r0	; 63
     162:	0f 90       	pop	r0
     164:	1f 90       	pop	r1
     166:	18 95       	reti

00000168 <M_Timer_0_void_Init>:
	#error	("wrong OC0 mode ")
	#endif

#elif	TIMER_0_MODE ==	TIMER_0_FASTPWM_MODE

	SET_BIT(TCCR0_REG,WGM01_BIT);
     168:	e3 e5       	ldi	r30, 0x53	; 83
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	80 81       	ld	r24, Z
     16e:	88 60       	ori	r24, 0x08	; 8
     170:	80 83       	st	Z, r24
	SET_BIT(TCCR0_REG,WGM00_BIT);
     172:	80 81       	ld	r24, Z
     174:	80 64       	ori	r24, 0x40	; 64
     176:	80 83       	st	Z, r24
	#if(TIMER_0_OC0_MODE == TIMER0_OC0_PWM_INVERTING ||  TIMER_0_OC0_MODE == TIMER0_OC0_PWM_NON_INVERTING)
		// step 1 : apply mask
		TCCR0_REG &=TIMER_0_OC0_MODE_MASK;
     178:	80 81       	ld	r24, Z
     17a:	8f 7c       	andi	r24, 0xCF	; 207
     17c:	80 83       	st	Z, r24
		// step 2 : insert value
		TCCR0_REG |=TIMER_0_OC0_MODE;
     17e:	80 81       	ld	r24, Z
     180:	80 62       	ori	r24, 0x20	; 32
     182:	80 83       	st	Z, r24
#error("wrong TIMER_0_MODE ")

#endif


}
     184:	08 95       	ret

00000186 <M_Timer_0_void_Start>:
void M_Timer_0_void_Start(void)
{

#if (TIMER_0_PRESCALER >=0 &&  TIMER_0_PRESCALER<=7)
	// step 1 : apply mask
	TCCR0_REG &= TIMER_0_PRESCALER_MASK;
     186:	e3 e5       	ldi	r30, 0x53	; 83
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	80 81       	ld	r24, Z
     18c:	88 7f       	andi	r24, 0xF8	; 248
     18e:	80 83       	st	Z, r24
	// step 2 : Insert value
	TCCR0_REG |= TIMER_0_PRESCALER<<TIMER_0_PRESCALER_SHIFT;
     190:	80 81       	ld	r24, Z
     192:	85 60       	ori	r24, 0x05	; 5
     194:	80 83       	st	Z, r24
	SET_BIT(TCCR0_REG,CS01_BIT);
	CLR_BIT(TCCR0_REG,CS00_BIT);
#endif
	 */

}
     196:	08 95       	ret

00000198 <M_Timer_0_void_Stop>:
void M_Timer_0_void_Stop(void)
{
	CLR_BIT(TCCR0_REG,CS02_BIT);
     198:	e3 e5       	ldi	r30, 0x53	; 83
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	8b 7f       	andi	r24, 0xFB	; 251
     1a0:	80 83       	st	Z, r24
	CLR_BIT(TCCR0_REG,CS01_BIT);
     1a2:	80 81       	ld	r24, Z
     1a4:	8d 7f       	andi	r24, 0xFD	; 253
     1a6:	80 83       	st	Z, r24
	CLR_BIT(TCCR0_REG,CS00_BIT);
     1a8:	80 81       	ld	r24, Z
     1aa:	8e 7f       	andi	r24, 0xFE	; 254
     1ac:	80 83       	st	Z, r24
}
     1ae:	08 95       	ret

000001b0 <M_Timer_0_void_EnableInt>:


void M_Timer_0_void_EnableInt(u8 copy_u8_IntId)
{
	switch (copy_u8_IntId)
     1b0:	88 23       	and	r24, r24
     1b2:	19 f0       	breq	.+6      	; 0x1ba <M_Timer_0_void_EnableInt+0xa>
     1b4:	81 30       	cpi	r24, 0x01	; 1
     1b6:	61 f4       	brne	.+24     	; 0x1d0 <M_Timer_0_void_EnableInt+0x20>
     1b8:	06 c0       	rjmp	.+12     	; 0x1c6 <M_Timer_0_void_EnableInt+0x16>
	{
	case TIMER0_OVF_INT_ID:
		//to enable timer 0 overflow interrupt
		SET_BIT(TIMSK_REG,TOIE0_BIT);
     1ba:	e9 e5       	ldi	r30, 0x59	; 89
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	81 60       	ori	r24, 0x01	; 1
     1c2:	80 83       	st	Z, r24
     1c4:	08 95       	ret
		break;
	case  TIMER0_COMP_MATCH_INT_ID:
		//to enable timer 0 output compare interrupt
		SET_BIT(TIMSK_REG,OCIE0_BIT);
     1c6:	e9 e5       	ldi	r30, 0x59	; 89
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	82 60       	ori	r24, 0x02	; 2
     1ce:	80 83       	st	Z, r24
     1d0:	08 95       	ret

000001d2 <M_Timer_0_void_DisableInt>:
	default:   break;
	}
}
void M_Timer_0_void_DisableInt(u8 copy_u8_IntId)
{
	switch(copy_u8_IntId)
     1d2:	88 23       	and	r24, r24
     1d4:	19 f0       	breq	.+6      	; 0x1dc <M_Timer_0_void_DisableInt+0xa>
     1d6:	81 30       	cpi	r24, 0x01	; 1
     1d8:	61 f4       	brne	.+24     	; 0x1f2 <M_Timer_0_void_DisableInt+0x20>
     1da:	06 c0       	rjmp	.+12     	; 0x1e8 <M_Timer_0_void_DisableInt+0x16>
	{
	case TIMER0_OVF_INT_ID:
		CLR_BIT(TIMSK_REG,TOIE0_BIT);
     1dc:	e9 e5       	ldi	r30, 0x59	; 89
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	8e 7f       	andi	r24, 0xFE	; 254
     1e4:	80 83       	st	Z, r24
     1e6:	08 95       	ret
		break;
	case  TIMER0_COMP_MATCH_INT_ID:
		CLR_BIT(TIMSK_REG,OCIE0_BIT);
     1e8:	e9 e5       	ldi	r30, 0x59	; 89
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	80 81       	ld	r24, Z
     1ee:	8d 7f       	andi	r24, 0xFD	; 253
     1f0:	80 83       	st	Z, r24
     1f2:	08 95       	ret

000001f4 <M_Timer_0_void_SetTime>:
	Timer_0_u32_NumOfComMatch = Local_u32_TotalTicks / Local_u8_Counter;	// now Local_u8_Counter = OCR value
	OCR0_REG=Local_u8_Counter;

#endif

}
     1f4:	08 95       	ret

000001f6 <M_Timer_0_void_SetFastPWM>:

void M_Timer_0_void_SetFastPWM(u8 copy_u8_DutyCycle)
{
     1f6:	98 2f       	mov	r25, r24
#if(TIMER_0_OC0_MODE == TIMER0_OC0_PWM_NON_INVERTING)
	OCR0_REG = abs(((copy_u8_DutyCycle * 256)/100)-1);
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	64 e6       	ldi	r22, 0x64	; 100
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	0e 94 31 0a 	call	0x1462	; 0x1462 <__divmodhi4>
     202:	61 50       	subi	r22, 0x01	; 1
     204:	70 40       	sbci	r23, 0x00	; 0
     206:	1a f4       	brpl	.+6      	; 0x20e <M_Timer_0_void_SetFastPWM+0x18>
     208:	70 95       	com	r23
     20a:	61 95       	neg	r22
     20c:	7f 4f       	sbci	r23, 0xFF	; 255
     20e:	6c bf       	out	0x3c, r22	; 60
	OCR0_REG = abs(255-((copy_u8_DutyCycle * 256)/100));
#else
#error ("wrong OC0 mode")
#endif

}
     210:	08 95       	ret

00000212 <M_Timer_0_void_SetPhaseCorrectPWM>:
		OCR0_REG = (255-((copy_u8_DutyCycle * 255)/100));
	#else
	#error ("wrong OC0 mode")
	#endif
#endif
}
     212:	08 95       	ret

00000214 <M_Timer_0_INT_void_SetCallback>:



void M_Timer_0_INT_void_SetCallback( void (*copy_Ptr) (void),u8 Int_Id )
{
	Timer_0_CallBack[Int_Id]=copy_Ptr;
     214:	e6 2f       	mov	r30, r22
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	ee 0f       	add	r30, r30
     21a:	ff 1f       	adc	r31, r31
     21c:	e5 58       	subi	r30, 0x85	; 133
     21e:	ff 4f       	sbci	r31, 0xFF	; 255
     220:	91 83       	std	Z+1, r25	; 0x01
     222:	80 83       	st	Z, r24
}
     224:	08 95       	ret

00000226 <__vector_11>:


ISR(TIMER0_OVF_vect)
{
     226:	1f 92       	push	r1
     228:	0f 92       	push	r0
     22a:	0f b6       	in	r0, 0x3f	; 63
     22c:	0f 92       	push	r0
     22e:	11 24       	eor	r1, r1
     230:	2f 93       	push	r18
     232:	3f 93       	push	r19
     234:	4f 93       	push	r20
     236:	5f 93       	push	r21
     238:	6f 93       	push	r22
     23a:	7f 93       	push	r23
     23c:	8f 93       	push	r24
     23e:	9f 93       	push	r25
     240:	af 93       	push	r26
     242:	bf 93       	push	r27
     244:	ef 93       	push	r30
     246:	ff 93       	push	r31
	/* if(Timer_0_CallBack[TIMER0_OVF_INT_ID] == NULL)
	 * Timer_0_CallBack[TIMER0_OVF_INT_ID] == startup code address
	*/
	if(Timer_0_CallBack[TIMER0_OVF_INT_ID] != NULL)
     248:	e0 91 7b 00 	lds	r30, 0x007B
     24c:	f0 91 7c 00 	lds	r31, 0x007C
     250:	30 97       	sbiw	r30, 0x00	; 0
     252:	69 f1       	breq	.+90     	; 0x2ae <__vector_11+0x88>
	{
		static u32  Local_u32_Counter = 0;
		Local_u32_Counter++;
     254:	80 91 83 00 	lds	r24, 0x0083
     258:	90 91 84 00 	lds	r25, 0x0084
     25c:	a0 91 85 00 	lds	r26, 0x0085
     260:	b0 91 86 00 	lds	r27, 0x0086
     264:	01 96       	adiw	r24, 0x01	; 1
     266:	a1 1d       	adc	r26, r1
     268:	b1 1d       	adc	r27, r1
     26a:	80 93 83 00 	sts	0x0083, r24
     26e:	90 93 84 00 	sts	0x0084, r25
     272:	a0 93 85 00 	sts	0x0085, r26
     276:	b0 93 86 00 	sts	0x0086, r27

		if(Local_u32_Counter==Timer_0_u32_NumOfOverFlows)
     27a:	20 91 72 00 	lds	r18, 0x0072
     27e:	30 91 73 00 	lds	r19, 0x0073
     282:	40 91 74 00 	lds	r20, 0x0074
     286:	50 91 75 00 	lds	r21, 0x0075
     28a:	82 17       	cp	r24, r18
     28c:	93 07       	cpc	r25, r19
     28e:	a4 07       	cpc	r26, r20
     290:	b5 07       	cpc	r27, r21
     292:	69 f4       	brne	.+26     	; 0x2ae <__vector_11+0x88>
		{
			Timer_0_CallBack[TIMER0_OVF_INT_ID]();
     294:	09 95       	icall
			Local_u32_Counter = 0;
     296:	10 92 83 00 	sts	0x0083, r1
     29a:	10 92 84 00 	sts	0x0084, r1
     29e:	10 92 85 00 	sts	0x0085, r1
     2a2:	10 92 86 00 	sts	0x0086, r1
			TCNT0_REG = OVERFLOW_COUNT - Timer_0_u8_rem_Ticks;// over flow happen when TCNT0_REG = TCNT0_REG_MaxValue + 1 ==> 255+1
     2a6:	80 91 7a 00 	lds	r24, 0x007A
     2aa:	81 95       	neg	r24
     2ac:	82 bf       	out	0x32, r24	; 50

		}
	}
	else{}

}
     2ae:	ff 91       	pop	r31
     2b0:	ef 91       	pop	r30
     2b2:	bf 91       	pop	r27
     2b4:	af 91       	pop	r26
     2b6:	9f 91       	pop	r25
     2b8:	8f 91       	pop	r24
     2ba:	7f 91       	pop	r23
     2bc:	6f 91       	pop	r22
     2be:	5f 91       	pop	r21
     2c0:	4f 91       	pop	r20
     2c2:	3f 91       	pop	r19
     2c4:	2f 91       	pop	r18
     2c6:	0f 90       	pop	r0
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	0f 90       	pop	r0
     2cc:	1f 90       	pop	r1
     2ce:	18 95       	reti

000002d0 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     2d0:	1f 92       	push	r1
     2d2:	0f 92       	push	r0
     2d4:	0f b6       	in	r0, 0x3f	; 63
     2d6:	0f 92       	push	r0
     2d8:	11 24       	eor	r1, r1
     2da:	2f 93       	push	r18
     2dc:	3f 93       	push	r19
     2de:	4f 93       	push	r20
     2e0:	5f 93       	push	r21
     2e2:	6f 93       	push	r22
     2e4:	7f 93       	push	r23
     2e6:	8f 93       	push	r24
     2e8:	9f 93       	push	r25
     2ea:	af 93       	push	r26
     2ec:	bf 93       	push	r27
     2ee:	ef 93       	push	r30
     2f0:	ff 93       	push	r31
	if(Timer_0_CallBack[TIMER0_COMP_MATCH_INT_ID] != NULL)
     2f2:	e0 91 7d 00 	lds	r30, 0x007D
     2f6:	f0 91 7e 00 	lds	r31, 0x007E
     2fa:	30 97       	sbiw	r30, 0x00	; 0
     2fc:	49 f1       	breq	.+82     	; 0x350 <__vector_10+0x80>
	{
		static u32  Local_u32_Counter = 0;
		Local_u32_Counter++;
     2fe:	80 91 7f 00 	lds	r24, 0x007F
     302:	90 91 80 00 	lds	r25, 0x0080
     306:	a0 91 81 00 	lds	r26, 0x0081
     30a:	b0 91 82 00 	lds	r27, 0x0082
     30e:	01 96       	adiw	r24, 0x01	; 1
     310:	a1 1d       	adc	r26, r1
     312:	b1 1d       	adc	r27, r1
     314:	80 93 7f 00 	sts	0x007F, r24
     318:	90 93 80 00 	sts	0x0080, r25
     31c:	a0 93 81 00 	sts	0x0081, r26
     320:	b0 93 82 00 	sts	0x0082, r27

		if(Local_u32_Counter==Timer_0_u32_NumOfComMatch)
     324:	20 91 76 00 	lds	r18, 0x0076
     328:	30 91 77 00 	lds	r19, 0x0077
     32c:	40 91 78 00 	lds	r20, 0x0078
     330:	50 91 79 00 	lds	r21, 0x0079
     334:	82 17       	cp	r24, r18
     336:	93 07       	cpc	r25, r19
     338:	a4 07       	cpc	r26, r20
     33a:	b5 07       	cpc	r27, r21
     33c:	49 f4       	brne	.+18     	; 0x350 <__vector_10+0x80>
		{
			Timer_0_CallBack[TIMER0_COMP_MATCH_INT_ID]();
     33e:	09 95       	icall
			Local_u32_Counter = 0;
     340:	10 92 7f 00 	sts	0x007F, r1
     344:	10 92 80 00 	sts	0x0080, r1
     348:	10 92 81 00 	sts	0x0081, r1
     34c:	10 92 82 00 	sts	0x0082, r1


		}
	}
	else{}
}
     350:	ff 91       	pop	r31
     352:	ef 91       	pop	r30
     354:	bf 91       	pop	r27
     356:	af 91       	pop	r26
     358:	9f 91       	pop	r25
     35a:	8f 91       	pop	r24
     35c:	7f 91       	pop	r23
     35e:	6f 91       	pop	r22
     360:	5f 91       	pop	r21
     362:	4f 91       	pop	r20
     364:	3f 91       	pop	r19
     366:	2f 91       	pop	r18
     368:	0f 90       	pop	r0
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	0f 90       	pop	r0
     36e:	1f 90       	pop	r1
     370:	18 95       	reti

00000372 <M_GIE_void_Enable>:



void M_GIE_void_Enable(void)
{
	SET_BIT(SREG_REG,I_BIT);
     372:	ef e5       	ldi	r30, 0x5F	; 95
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	80 68       	ori	r24, 0x80	; 128
     37a:	80 83       	st	Z, r24
}
     37c:	08 95       	ret

0000037e <M_GIE_void_Disable>:
void M_GIE_void_Disable(void)
{
	CLR_BIT(SREG_REG,I_BIT);
     37e:	ef e5       	ldi	r30, 0x5F	; 95
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	80 81       	ld	r24, Z
     384:	8f 77       	andi	r24, 0x7F	; 127
     386:	80 83       	st	Z, r24
}
     388:	08 95       	ret

0000038a <M_Ext_Int_void_SetCallBack>:

}

void M_Ext_Int_void_SetCallBack(void (*Copy_Ptr) (void))
{
	Ext_Int_Callback = Copy_Ptr;
     38a:	90 93 88 00 	sts	0x0088, r25
     38e:	80 93 87 00 	sts	0x0087, r24
}
     392:	08 95       	ret

00000394 <__vector_2>:


ISR(INT1_vect)		// from Interrupt Vectors table page 44 ATMEGA32 data sheet
{
     394:	1f 92       	push	r1
     396:	0f 92       	push	r0
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	0f 92       	push	r0
     39c:	11 24       	eor	r1, r1
     39e:	2f 93       	push	r18
     3a0:	3f 93       	push	r19
     3a2:	4f 93       	push	r20
     3a4:	5f 93       	push	r21
     3a6:	6f 93       	push	r22
     3a8:	7f 93       	push	r23
     3aa:	8f 93       	push	r24
     3ac:	9f 93       	push	r25
     3ae:	af 93       	push	r26
     3b0:	bf 93       	push	r27
     3b2:	ef 93       	push	r30
     3b4:	ff 93       	push	r31
	Ext_Int_Callback();		// Ext_Int_Callback is pointer to function
     3b6:	e0 91 87 00 	lds	r30, 0x0087
     3ba:	f0 91 88 00 	lds	r31, 0x0088
     3be:	09 95       	icall
		do{
			Local_u32_Counter++;
		}while (Local_u32_Counter<SWITCH_DEUNCING_TIME_IN_CLK_CYCLES);


}
     3c0:	ff 91       	pop	r31
     3c2:	ef 91       	pop	r30
     3c4:	bf 91       	pop	r27
     3c6:	af 91       	pop	r26
     3c8:	9f 91       	pop	r25
     3ca:	8f 91       	pop	r24
     3cc:	7f 91       	pop	r23
     3ce:	6f 91       	pop	r22
     3d0:	5f 91       	pop	r21
     3d2:	4f 91       	pop	r20
     3d4:	3f 91       	pop	r19
     3d6:	2f 91       	pop	r18
     3d8:	0f 90       	pop	r0
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	0f 90       	pop	r0
     3de:	1f 90       	pop	r1
     3e0:	18 95       	reti

000003e2 <M_Ext_Int_void_Init>:

void M_Ext_Int_void_Init(u8 copy_u8_Int)
{


	switch(copy_u8_Int)
     3e2:	81 30       	cpi	r24, 0x01	; 1
     3e4:	99 f0       	breq	.+38     	; 0x40c <M_Ext_Int_void_Init+0x2a>
     3e6:	81 30       	cpi	r24, 0x01	; 1
     3e8:	18 f0       	brcs	.+6      	; 0x3f0 <M_Ext_Int_void_Init+0xe>
     3ea:	82 30       	cpi	r24, 0x02	; 2
     3ec:	39 f5       	brne	.+78     	; 0x43c <M_Ext_Int_void_Init+0x5a>
     3ee:	1c c0       	rjmp	.+56     	; 0x428 <M_Ext_Int_void_Init+0x46>
	{
	case EXT_INT0:
		//to adjust sense control to falling edge on INT0
#if EXT_INT0_SENSE_CONTROL	==	FALLING_EDGE
		SET_BIT(MCUCR_REG,ISC01_BIT);
     3f0:	e5 e5       	ldi	r30, 0x55	; 85
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	80 81       	ld	r24, Z
     3f6:	82 60       	ori	r24, 0x02	; 2
     3f8:	80 83       	st	Z, r24
		CLR_BIT(MCUCR_REG,ISC00_BIT);
     3fa:	80 81       	ld	r24, Z
     3fc:	8e 7f       	andi	r24, 0xFE	; 254
     3fe:	80 83       	st	Z, r24
		CLR_BIT(MCUCR_REG,ISC01_BIT);
		SET_BIT(MCUCR_REG,ISC00_BIT);

#endif
		//to enable INT0 Interrupt
		SET_BIT(GICR_REG,INT0_BIT);
     400:	eb e5       	ldi	r30, 0x5B	; 91
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	80 81       	ld	r24, Z
     406:	80 64       	ori	r24, 0x40	; 64
     408:	80 83       	st	Z, r24
     40a:	18 c0       	rjmp	.+48     	; 0x43c <M_Ext_Int_void_Init+0x5a>
		break;

	case EXT_INT1:
		//to adjust sense control to falling edge on INT1
#if EXT_INT1_SENSE_CONTROL	==	FALLING_EDGE
		SET_BIT(MCUCR_REG,ISC11_BIT);
     40c:	e5 e5       	ldi	r30, 0x55	; 85
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	88 60       	ori	r24, 0x08	; 8
     414:	80 83       	st	Z, r24
		CLR_BIT(MCUCR_REG,ISC10_BIT);
     416:	80 81       	ld	r24, Z
     418:	8b 7f       	andi	r24, 0xFB	; 251
     41a:	80 83       	st	Z, r24
		CLR_BIT(MCUCR_REG,ISC11_BIT);
		SET_BIT(MCUCR_REG,ISC10_BIT);

#endif
		//to enable INT1 Interrupt
		SET_BIT(GICR_REG,INT1_BIT);
     41c:	eb e5       	ldi	r30, 0x5B	; 91
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	80 81       	ld	r24, Z
     422:	80 68       	ori	r24, 0x80	; 128
     424:	80 83       	st	Z, r24
     426:	0a c0       	rjmp	.+20     	; 0x43c <M_Ext_Int_void_Init+0x5a>
		break;

	case EXT_INT2:
		//to adjust sense control to falling edge on INT2
#if EXT_INT0_SENSE_CONTROL	==	FALLING_EDGE
		CLR_BIT(MCUCSR_REG,ISC2_BIT);
     428:	e4 e5       	ldi	r30, 0x54	; 84
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	80 81       	ld	r24, Z
     42e:	8f 7b       	andi	r24, 0xBF	; 191
     430:	80 83       	st	Z, r24
#elif	EXT_INT0_SENSE_CONTROL	==	RISING_EDGE
		SET_BIT(MCUCSR_REG,ISC2_BIT);
#endif
		//to enable INT2 Interrupt
		SET_BIT(GICR_REG,INT2_BIT);
     432:	eb e5       	ldi	r30, 0x5B	; 91
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	80 62       	ori	r24, 0x20	; 32
     43a:	80 83       	st	Z, r24

	}



	M_GIE_void_Enable();	// to enable global INT
     43c:	0e 94 b9 01 	call	0x372	; 0x372 <M_GIE_void_Enable>

}
     440:	08 95       	ret

00000442 <M_Dio_pinMode>:
#include"Dio_Interface.h"
#include"Dio_Private.h"

/****************************************Functions****************************************/
void M_Dio_pinMode(u8 copy_u8_value,u8 copy_u8_pinMode)
{
     442:	28 2f       	mov	r18, r24
     444:	36 2f       	mov	r19, r22
	u8 local_u8_PinNum = copy_u8_value % 10;
     446:	6a e0       	ldi	r22, 0x0A	; 10
     448:	0e 94 25 0a 	call	0x144a	; 0x144a <__udivmodqi4>
     44c:	49 2f       	mov	r20, r25
	u8 local_u8_PortNum = copy_u8_value / 10;
     44e:	82 2f       	mov	r24, r18
     450:	0e 94 25 0a 	call	0x144a	; 0x144a <__udivmodqi4>
	switch(copy_u8_pinMode)
     454:	33 23       	and	r19, r19
     456:	21 f0       	breq	.+8      	; 0x460 <M_Dio_pinMode+0x1e>
     458:	31 30       	cpi	r19, 0x01	; 1
     45a:	09 f0       	breq	.+2      	; 0x45e <M_Dio_pinMode+0x1c>
     45c:	86 c0       	rjmp	.+268    	; 0x56a <M_Dio_pinMode+0x128>
     45e:	46 c0       	rjmp	.+140    	; 0x4ec <M_Dio_pinMode+0xaa>
	{
	case INPUT:
		switch(local_u8_PortNum)
     460:	82 30       	cpi	r24, 0x02	; 2
     462:	d1 f0       	breq	.+52     	; 0x498 <M_Dio_pinMode+0x56>
     464:	83 30       	cpi	r24, 0x03	; 3
     466:	20 f4       	brcc	.+8      	; 0x470 <M_Dio_pinMode+0x2e>
     468:	81 30       	cpi	r24, 0x01	; 1
     46a:	09 f0       	breq	.+2      	; 0x46e <M_Dio_pinMode+0x2c>
     46c:	7e c0       	rjmp	.+252    	; 0x56a <M_Dio_pinMode+0x128>
     46e:	06 c0       	rjmp	.+12     	; 0x47c <M_Dio_pinMode+0x3a>
     470:	83 30       	cpi	r24, 0x03	; 3
     472:	01 f1       	breq	.+64     	; 0x4b4 <M_Dio_pinMode+0x72>
     474:	84 30       	cpi	r24, 0x04	; 4
     476:	09 f0       	breq	.+2      	; 0x47a <M_Dio_pinMode+0x38>
     478:	78 c0       	rjmp	.+240    	; 0x56a <M_Dio_pinMode+0x128>
     47a:	2a c0       	rjmp	.+84     	; 0x4d0 <M_Dio_pinMode+0x8e>
		{
		case PORTA_PINS : CLR_BIT(DDRA_REG,local_u8_PinNum); break;
     47c:	ea e3       	ldi	r30, 0x3A	; 58
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	20 81       	ld	r18, Z
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	02 c0       	rjmp	.+4      	; 0x48c <M_Dio_pinMode+0x4a>
     488:	88 0f       	add	r24, r24
     48a:	99 1f       	adc	r25, r25
     48c:	4a 95       	dec	r20
     48e:	e2 f7       	brpl	.-8      	; 0x488 <M_Dio_pinMode+0x46>
     490:	80 95       	com	r24
     492:	82 23       	and	r24, r18
     494:	80 83       	st	Z, r24
     496:	08 95       	ret
		case PORTB_PINS : CLR_BIT(DDRB_REG,local_u8_PinNum); break;
     498:	e7 e3       	ldi	r30, 0x37	; 55
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	20 81       	ld	r18, Z
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <M_Dio_pinMode+0x66>
     4a4:	88 0f       	add	r24, r24
     4a6:	99 1f       	adc	r25, r25
     4a8:	4a 95       	dec	r20
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <M_Dio_pinMode+0x62>
     4ac:	80 95       	com	r24
     4ae:	82 23       	and	r24, r18
     4b0:	80 83       	st	Z, r24
     4b2:	08 95       	ret
		case PORTC_PINS : CLR_BIT(DDRC_REG,local_u8_PinNum); break;
     4b4:	e4 e3       	ldi	r30, 0x34	; 52
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	20 81       	ld	r18, Z
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <M_Dio_pinMode+0x82>
     4c0:	88 0f       	add	r24, r24
     4c2:	99 1f       	adc	r25, r25
     4c4:	4a 95       	dec	r20
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <M_Dio_pinMode+0x7e>
     4c8:	80 95       	com	r24
     4ca:	82 23       	and	r24, r18
     4cc:	80 83       	st	Z, r24
     4ce:	08 95       	ret
		case PORTD_PINS : CLR_BIT(DDRD_REG,local_u8_PinNum); break;
     4d0:	e1 e3       	ldi	r30, 0x31	; 49
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	20 81       	ld	r18, Z
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <M_Dio_pinMode+0x9e>
     4dc:	88 0f       	add	r24, r24
     4de:	99 1f       	adc	r25, r25
     4e0:	4a 95       	dec	r20
     4e2:	e2 f7       	brpl	.-8      	; 0x4dc <M_Dio_pinMode+0x9a>
     4e4:	80 95       	com	r24
     4e6:	82 23       	and	r24, r18
     4e8:	80 83       	st	Z, r24
     4ea:	08 95       	ret
		default:
			break;
		}
		break;
		case OUTPUT :
			switch(local_u8_PortNum)
     4ec:	82 30       	cpi	r24, 0x02	; 2
     4ee:	b9 f0       	breq	.+46     	; 0x51e <M_Dio_pinMode+0xdc>
     4f0:	83 30       	cpi	r24, 0x03	; 3
     4f2:	18 f4       	brcc	.+6      	; 0x4fa <M_Dio_pinMode+0xb8>
     4f4:	81 30       	cpi	r24, 0x01	; 1
     4f6:	c9 f5       	brne	.+114    	; 0x56a <M_Dio_pinMode+0x128>
     4f8:	05 c0       	rjmp	.+10     	; 0x504 <M_Dio_pinMode+0xc2>
     4fa:	83 30       	cpi	r24, 0x03	; 3
     4fc:	e9 f0       	breq	.+58     	; 0x538 <M_Dio_pinMode+0xf6>
     4fe:	84 30       	cpi	r24, 0x04	; 4
     500:	a1 f5       	brne	.+104    	; 0x56a <M_Dio_pinMode+0x128>
     502:	27 c0       	rjmp	.+78     	; 0x552 <M_Dio_pinMode+0x110>
			{
			case PORTA_PINS : SET_BIT(DDRA_REG,local_u8_PinNum); break;
     504:	ea e3       	ldi	r30, 0x3A	; 58
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	20 81       	ld	r18, Z
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	02 c0       	rjmp	.+4      	; 0x514 <M_Dio_pinMode+0xd2>
     510:	88 0f       	add	r24, r24
     512:	99 1f       	adc	r25, r25
     514:	4a 95       	dec	r20
     516:	e2 f7       	brpl	.-8      	; 0x510 <M_Dio_pinMode+0xce>
     518:	28 2b       	or	r18, r24
     51a:	20 83       	st	Z, r18
     51c:	08 95       	ret
			case PORTB_PINS : SET_BIT(DDRB_REG,local_u8_PinNum); break;
     51e:	e7 e3       	ldi	r30, 0x37	; 55
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	20 81       	ld	r18, Z
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	02 c0       	rjmp	.+4      	; 0x52e <M_Dio_pinMode+0xec>
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	4a 95       	dec	r20
     530:	e2 f7       	brpl	.-8      	; 0x52a <M_Dio_pinMode+0xe8>
     532:	28 2b       	or	r18, r24
     534:	20 83       	st	Z, r18
     536:	08 95       	ret
			case PORTC_PINS : SET_BIT(DDRC_REG,local_u8_PinNum); break;
     538:	e4 e3       	ldi	r30, 0x34	; 52
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	20 81       	ld	r18, Z
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	02 c0       	rjmp	.+4      	; 0x548 <M_Dio_pinMode+0x106>
     544:	88 0f       	add	r24, r24
     546:	99 1f       	adc	r25, r25
     548:	4a 95       	dec	r20
     54a:	e2 f7       	brpl	.-8      	; 0x544 <M_Dio_pinMode+0x102>
     54c:	28 2b       	or	r18, r24
     54e:	20 83       	st	Z, r18
     550:	08 95       	ret
			case PORTD_PINS : SET_BIT(DDRD_REG,local_u8_PinNum); break;
     552:	e1 e3       	ldi	r30, 0x31	; 49
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	20 81       	ld	r18, Z
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	02 c0       	rjmp	.+4      	; 0x562 <M_Dio_pinMode+0x120>
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	4a 95       	dec	r20
     564:	e2 f7       	brpl	.-8      	; 0x55e <M_Dio_pinMode+0x11c>
     566:	28 2b       	or	r18, r24
     568:	20 83       	st	Z, r18
     56a:	08 95       	ret

0000056c <M_Dio_pinWrite>:
	}

}

void M_Dio_pinWrite(u8 copy_u8_value,u8 copy_u8_pinMode)
{
     56c:	28 2f       	mov	r18, r24
     56e:	36 2f       	mov	r19, r22
	u8 local_u8_pinNum = copy_u8_value % 10;
     570:	6a e0       	ldi	r22, 0x0A	; 10
     572:	0e 94 25 0a 	call	0x144a	; 0x144a <__udivmodqi4>
     576:	49 2f       	mov	r20, r25
	u8 local_u8_portNum = copy_u8_value / 10;
     578:	82 2f       	mov	r24, r18
     57a:	0e 94 25 0a 	call	0x144a	; 0x144a <__udivmodqi4>
	switch(copy_u8_pinMode)
     57e:	33 23       	and	r19, r19
     580:	21 f0       	breq	.+8      	; 0x58a <M_Dio_pinWrite+0x1e>
     582:	31 30       	cpi	r19, 0x01	; 1
     584:	09 f0       	breq	.+2      	; 0x588 <M_Dio_pinWrite+0x1c>
     586:	86 c0       	rjmp	.+268    	; 0x694 <M_Dio_pinWrite+0x128>
     588:	46 c0       	rjmp	.+140    	; 0x616 <M_Dio_pinWrite+0xaa>
	{
	case LOW:
		switch(local_u8_portNum)
     58a:	82 30       	cpi	r24, 0x02	; 2
     58c:	d1 f0       	breq	.+52     	; 0x5c2 <M_Dio_pinWrite+0x56>
     58e:	83 30       	cpi	r24, 0x03	; 3
     590:	20 f4       	brcc	.+8      	; 0x59a <M_Dio_pinWrite+0x2e>
     592:	81 30       	cpi	r24, 0x01	; 1
     594:	09 f0       	breq	.+2      	; 0x598 <M_Dio_pinWrite+0x2c>
     596:	7e c0       	rjmp	.+252    	; 0x694 <M_Dio_pinWrite+0x128>
     598:	06 c0       	rjmp	.+12     	; 0x5a6 <M_Dio_pinWrite+0x3a>
     59a:	83 30       	cpi	r24, 0x03	; 3
     59c:	01 f1       	breq	.+64     	; 0x5de <M_Dio_pinWrite+0x72>
     59e:	84 30       	cpi	r24, 0x04	; 4
     5a0:	09 f0       	breq	.+2      	; 0x5a4 <M_Dio_pinWrite+0x38>
     5a2:	78 c0       	rjmp	.+240    	; 0x694 <M_Dio_pinWrite+0x128>
     5a4:	2a c0       	rjmp	.+84     	; 0x5fa <M_Dio_pinWrite+0x8e>
		{
		case PORTA_PINS : CLR_BIT(PORTA_REG,local_u8_pinNum); break;
     5a6:	eb e3       	ldi	r30, 0x3B	; 59
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	20 81       	ld	r18, Z
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <M_Dio_pinWrite+0x4a>
     5b2:	88 0f       	add	r24, r24
     5b4:	99 1f       	adc	r25, r25
     5b6:	4a 95       	dec	r20
     5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <M_Dio_pinWrite+0x46>
     5ba:	80 95       	com	r24
     5bc:	82 23       	and	r24, r18
     5be:	80 83       	st	Z, r24
     5c0:	08 95       	ret
		case PORTB_PINS : CLR_BIT(PORTB_REG,local_u8_pinNum); break;
     5c2:	e8 e3       	ldi	r30, 0x38	; 56
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	20 81       	ld	r18, Z
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <M_Dio_pinWrite+0x66>
     5ce:	88 0f       	add	r24, r24
     5d0:	99 1f       	adc	r25, r25
     5d2:	4a 95       	dec	r20
     5d4:	e2 f7       	brpl	.-8      	; 0x5ce <M_Dio_pinWrite+0x62>
     5d6:	80 95       	com	r24
     5d8:	82 23       	and	r24, r18
     5da:	80 83       	st	Z, r24
     5dc:	08 95       	ret
		case PORTC_PINS : CLR_BIT(PORTC_REG,local_u8_pinNum); break;
     5de:	e5 e3       	ldi	r30, 0x35	; 53
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	20 81       	ld	r18, Z
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	02 c0       	rjmp	.+4      	; 0x5ee <M_Dio_pinWrite+0x82>
     5ea:	88 0f       	add	r24, r24
     5ec:	99 1f       	adc	r25, r25
     5ee:	4a 95       	dec	r20
     5f0:	e2 f7       	brpl	.-8      	; 0x5ea <M_Dio_pinWrite+0x7e>
     5f2:	80 95       	com	r24
     5f4:	82 23       	and	r24, r18
     5f6:	80 83       	st	Z, r24
     5f8:	08 95       	ret
		case PORTD_PINS : CLR_BIT(PORTD_REG,local_u8_pinNum); break;
     5fa:	e2 e3       	ldi	r30, 0x32	; 50
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	20 81       	ld	r18, Z
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	02 c0       	rjmp	.+4      	; 0x60a <M_Dio_pinWrite+0x9e>
     606:	88 0f       	add	r24, r24
     608:	99 1f       	adc	r25, r25
     60a:	4a 95       	dec	r20
     60c:	e2 f7       	brpl	.-8      	; 0x606 <M_Dio_pinWrite+0x9a>
     60e:	80 95       	com	r24
     610:	82 23       	and	r24, r18
     612:	80 83       	st	Z, r24
     614:	08 95       	ret
		default:
			break;
		}
		break;
		case HIGH :
			switch(local_u8_portNum)
     616:	82 30       	cpi	r24, 0x02	; 2
     618:	b9 f0       	breq	.+46     	; 0x648 <M_Dio_pinWrite+0xdc>
     61a:	83 30       	cpi	r24, 0x03	; 3
     61c:	18 f4       	brcc	.+6      	; 0x624 <M_Dio_pinWrite+0xb8>
     61e:	81 30       	cpi	r24, 0x01	; 1
     620:	c9 f5       	brne	.+114    	; 0x694 <M_Dio_pinWrite+0x128>
     622:	05 c0       	rjmp	.+10     	; 0x62e <M_Dio_pinWrite+0xc2>
     624:	83 30       	cpi	r24, 0x03	; 3
     626:	e9 f0       	breq	.+58     	; 0x662 <M_Dio_pinWrite+0xf6>
     628:	84 30       	cpi	r24, 0x04	; 4
     62a:	a1 f5       	brne	.+104    	; 0x694 <M_Dio_pinWrite+0x128>
     62c:	27 c0       	rjmp	.+78     	; 0x67c <M_Dio_pinWrite+0x110>
			{
			case PORTA_PINS : SET_BIT(PORTA_REG,local_u8_pinNum); break;
     62e:	eb e3       	ldi	r30, 0x3B	; 59
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	20 81       	ld	r18, Z
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	02 c0       	rjmp	.+4      	; 0x63e <M_Dio_pinWrite+0xd2>
     63a:	88 0f       	add	r24, r24
     63c:	99 1f       	adc	r25, r25
     63e:	4a 95       	dec	r20
     640:	e2 f7       	brpl	.-8      	; 0x63a <M_Dio_pinWrite+0xce>
     642:	28 2b       	or	r18, r24
     644:	20 83       	st	Z, r18
     646:	08 95       	ret
			case PORTB_PINS : SET_BIT(PORTB_REG,local_u8_pinNum); break;
     648:	e8 e3       	ldi	r30, 0x38	; 56
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	20 81       	ld	r18, Z
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	02 c0       	rjmp	.+4      	; 0x658 <M_Dio_pinWrite+0xec>
     654:	88 0f       	add	r24, r24
     656:	99 1f       	adc	r25, r25
     658:	4a 95       	dec	r20
     65a:	e2 f7       	brpl	.-8      	; 0x654 <M_Dio_pinWrite+0xe8>
     65c:	28 2b       	or	r18, r24
     65e:	20 83       	st	Z, r18
     660:	08 95       	ret
			case PORTC_PINS : SET_BIT(PORTC_REG,local_u8_pinNum); break;
     662:	e5 e3       	ldi	r30, 0x35	; 53
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	20 81       	ld	r18, Z
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	02 c0       	rjmp	.+4      	; 0x672 <M_Dio_pinWrite+0x106>
     66e:	88 0f       	add	r24, r24
     670:	99 1f       	adc	r25, r25
     672:	4a 95       	dec	r20
     674:	e2 f7       	brpl	.-8      	; 0x66e <M_Dio_pinWrite+0x102>
     676:	28 2b       	or	r18, r24
     678:	20 83       	st	Z, r18
     67a:	08 95       	ret
			case PORTD_PINS : SET_BIT(PORTD_REG,local_u8_pinNum); break;
     67c:	e2 e3       	ldi	r30, 0x32	; 50
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	20 81       	ld	r18, Z
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	02 c0       	rjmp	.+4      	; 0x68c <M_Dio_pinWrite+0x120>
     688:	88 0f       	add	r24, r24
     68a:	99 1f       	adc	r25, r25
     68c:	4a 95       	dec	r20
     68e:	e2 f7       	brpl	.-8      	; 0x688 <M_Dio_pinWrite+0x11c>
     690:	28 2b       	or	r18, r24
     692:	20 83       	st	Z, r18
     694:	08 95       	ret

00000696 <M_Dio_pinRead>:
}



u8 M_Dio_pinRead(u8 copy_u8_value)
{
     696:	28 2f       	mov	r18, r24

	u8 local_u8_pinNum = copy_u8_value % 10;
     698:	6a e0       	ldi	r22, 0x0A	; 10
     69a:	0e 94 25 0a 	call	0x144a	; 0x144a <__udivmodqi4>
     69e:	39 2f       	mov	r19, r25
	u8 local_u8_portNum = copy_u8_value / 10;
	u8 local_u8_Reading=0;
	switch(local_u8_portNum)
     6a0:	82 2f       	mov	r24, r18
     6a2:	0e 94 25 0a 	call	0x144a	; 0x144a <__udivmodqi4>
     6a6:	82 30       	cpi	r24, 0x02	; 2
     6a8:	a1 f0       	breq	.+40     	; 0x6d2 <M_Dio_pinRead+0x3c>
     6aa:	83 30       	cpi	r24, 0x03	; 3
     6ac:	18 f4       	brcc	.+6      	; 0x6b4 <M_Dio_pinRead+0x1e>
     6ae:	81 30       	cpi	r24, 0x01	; 1
     6b0:	29 f4       	brne	.+10     	; 0x6bc <M_Dio_pinRead+0x26>
     6b2:	06 c0       	rjmp	.+12     	; 0x6c0 <M_Dio_pinRead+0x2a>
     6b4:	83 30       	cpi	r24, 0x03	; 3
     6b6:	b1 f0       	breq	.+44     	; 0x6e4 <M_Dio_pinRead+0x4e>
     6b8:	84 30       	cpi	r24, 0x04	; 4
     6ba:	e9 f0       	breq	.+58     	; 0x6f6 <M_Dio_pinRead+0x60>
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	08 95       	ret
	{
	case PORTA_PINS : local_u8_Reading= GET_BIT(PINA_REG,local_u8_pinNum); break;
     6c0:	89 b3       	in	r24, 0x19	; 25
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <M_Dio_pinRead+0x34>
     6c6:	95 95       	asr	r25
     6c8:	87 95       	ror	r24
     6ca:	3a 95       	dec	r19
     6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <M_Dio_pinRead+0x30>
     6ce:	81 70       	andi	r24, 0x01	; 1
     6d0:	08 95       	ret
	case PORTB_PINS : local_u8_Reading =GET_BIT(PINB_REG,local_u8_pinNum); break;
     6d2:	86 b3       	in	r24, 0x16	; 22
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <M_Dio_pinRead+0x46>
     6d8:	95 95       	asr	r25
     6da:	87 95       	ror	r24
     6dc:	3a 95       	dec	r19
     6de:	e2 f7       	brpl	.-8      	; 0x6d8 <M_Dio_pinRead+0x42>
     6e0:	81 70       	andi	r24, 0x01	; 1
     6e2:	08 95       	ret
	case PORTC_PINS :local_u8_Reading = GET_BIT(PINC_REG,local_u8_pinNum); break;
     6e4:	83 b3       	in	r24, 0x13	; 19
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <M_Dio_pinRead+0x58>
     6ea:	95 95       	asr	r25
     6ec:	87 95       	ror	r24
     6ee:	3a 95       	dec	r19
     6f0:	e2 f7       	brpl	.-8      	; 0x6ea <M_Dio_pinRead+0x54>
     6f2:	81 70       	andi	r24, 0x01	; 1
     6f4:	08 95       	ret
	case PORTD_PINS : local_u8_Reading=GET_BIT(PIND_REG,local_u8_pinNum); break;
     6f6:	80 b3       	in	r24, 0x10	; 16
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	02 c0       	rjmp	.+4      	; 0x700 <M_Dio_pinRead+0x6a>
     6fc:	95 95       	asr	r25
     6fe:	87 95       	ror	r24
     700:	3a 95       	dec	r19
     702:	e2 f7       	brpl	.-8      	; 0x6fc <M_Dio_pinRead+0x66>
     704:	81 70       	andi	r24, 0x01	; 1
	default:
		break;
	}
	return local_u8_Reading;

}
     706:	08 95       	ret

00000708 <M_Dio_PinTogl>:




void M_Dio_PinTogl(u8 copy_u8_value)
{
     708:	28 2f       	mov	r18, r24
	u8 local_u8_pinNum = copy_u8_value % 10;
     70a:	6a e0       	ldi	r22, 0x0A	; 10
     70c:	0e 94 25 0a 	call	0x144a	; 0x144a <__udivmodqi4>
     710:	39 2f       	mov	r19, r25
	u8 local_u8_portNum = copy_u8_value / 10;

	switch(local_u8_portNum)
     712:	82 2f       	mov	r24, r18
     714:	0e 94 25 0a 	call	0x144a	; 0x144a <__udivmodqi4>
     718:	82 30       	cpi	r24, 0x02	; 2
     71a:	b9 f0       	breq	.+46     	; 0x74a <M_Dio_PinTogl+0x42>
     71c:	83 30       	cpi	r24, 0x03	; 3
     71e:	18 f4       	brcc	.+6      	; 0x726 <M_Dio_PinTogl+0x1e>
     720:	81 30       	cpi	r24, 0x01	; 1
     722:	c9 f5       	brne	.+114    	; 0x796 <M_Dio_PinTogl+0x8e>
     724:	05 c0       	rjmp	.+10     	; 0x730 <M_Dio_PinTogl+0x28>
     726:	83 30       	cpi	r24, 0x03	; 3
     728:	e9 f0       	breq	.+58     	; 0x764 <M_Dio_PinTogl+0x5c>
     72a:	84 30       	cpi	r24, 0x04	; 4
     72c:	a1 f5       	brne	.+104    	; 0x796 <M_Dio_PinTogl+0x8e>
     72e:	27 c0       	rjmp	.+78     	; 0x77e <M_Dio_PinTogl+0x76>
	{
	case PORTA_PINS : TOGL_BIT(PORTA_REG,local_u8_pinNum); break;
     730:	eb e3       	ldi	r30, 0x3B	; 59
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	20 81       	ld	r18, Z
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	02 c0       	rjmp	.+4      	; 0x740 <M_Dio_PinTogl+0x38>
     73c:	88 0f       	add	r24, r24
     73e:	99 1f       	adc	r25, r25
     740:	3a 95       	dec	r19
     742:	e2 f7       	brpl	.-8      	; 0x73c <M_Dio_PinTogl+0x34>
     744:	28 27       	eor	r18, r24
     746:	20 83       	st	Z, r18
     748:	08 95       	ret
	case PORTB_PINS : TOGL_BIT(PORTB_REG,local_u8_pinNum); break;
     74a:	e8 e3       	ldi	r30, 0x38	; 56
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	20 81       	ld	r18, Z
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	02 c0       	rjmp	.+4      	; 0x75a <M_Dio_PinTogl+0x52>
     756:	88 0f       	add	r24, r24
     758:	99 1f       	adc	r25, r25
     75a:	3a 95       	dec	r19
     75c:	e2 f7       	brpl	.-8      	; 0x756 <M_Dio_PinTogl+0x4e>
     75e:	28 27       	eor	r18, r24
     760:	20 83       	st	Z, r18
     762:	08 95       	ret
	case PORTC_PINS : TOGL_BIT(PORTC_REG,local_u8_pinNum); break;
     764:	e5 e3       	ldi	r30, 0x35	; 53
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	20 81       	ld	r18, Z
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	02 c0       	rjmp	.+4      	; 0x774 <M_Dio_PinTogl+0x6c>
     770:	88 0f       	add	r24, r24
     772:	99 1f       	adc	r25, r25
     774:	3a 95       	dec	r19
     776:	e2 f7       	brpl	.-8      	; 0x770 <M_Dio_PinTogl+0x68>
     778:	28 27       	eor	r18, r24
     77a:	20 83       	st	Z, r18
     77c:	08 95       	ret
	case PORTD_PINS : TOGL_BIT(PORTD_REG,local_u8_pinNum); break;
     77e:	e2 e3       	ldi	r30, 0x32	; 50
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	20 81       	ld	r18, Z
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	02 c0       	rjmp	.+4      	; 0x78e <M_Dio_PinTogl+0x86>
     78a:	88 0f       	add	r24, r24
     78c:	99 1f       	adc	r25, r25
     78e:	3a 95       	dec	r19
     790:	e2 f7       	brpl	.-8      	; 0x78a <M_Dio_PinTogl+0x82>
     792:	28 27       	eor	r18, r24
     794:	20 83       	st	Z, r18
     796:	08 95       	ret

00000798 <M_ADC_void_Init>:


void M_ADC_void_Init(void)
{
#if ADC_V_REF	==	AVCC
	SET_BIT(ADMUX_REG,REFS0_BIT);
     798:	e7 e2       	ldi	r30, 0x27	; 39
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	80 81       	ld	r24, Z
     79e:	80 64       	ori	r24, 0x40	; 64
     7a0:	80 83       	st	Z, r24
	CLR_BIT(ADMUX_REG,REFS1_BIT);
     7a2:	80 81       	ld	r24, Z
     7a4:	8f 77       	andi	r24, 0x7F	; 127
     7a6:	80 83       	st	Z, r24
	SET_BIT(ADMUX_REG,REFS1_BIT);


#endif
	//to select right adjust
	CLR_BIT(ADMUX_REG,ADLAR_BIT);
     7a8:	80 81       	ld	r24, Z
     7aa:	8f 7d       	andi	r24, 0xDF	; 223
     7ac:	80 83       	st	Z, r24

	//to select ADC channel
	CLR_BIT(ADMUX_REG,MUX4_BIT);
     7ae:	80 81       	ld	r24, Z
     7b0:	8f 7e       	andi	r24, 0xEF	; 239
     7b2:	80 83       	st	Z, r24
	CLR_BIT(ADMUX_REG,MUX3_BIT);
     7b4:	80 81       	ld	r24, Z
     7b6:	87 7f       	andi	r24, 0xF7	; 247
     7b8:	80 83       	st	Z, r24
	CLR_BIT(ADMUX_REG,MUX2_BIT);
     7ba:	80 81       	ld	r24, Z
     7bc:	8b 7f       	andi	r24, 0xFB	; 251
     7be:	80 83       	st	Z, r24
	CLR_BIT(ADMUX_REG,MUX1_BIT);
     7c0:	80 81       	ld	r24, Z
     7c2:	8d 7f       	andi	r24, 0xFD	; 253
     7c4:	80 83       	st	Z, r24
	CLR_BIT(ADMUX_REG,MUX0_BIT);
     7c6:	80 81       	ld	r24, Z
     7c8:	8e 7f       	andi	r24, 0xFE	; 254
     7ca:	80 83       	st	Z, r24

	// to select Prescaler division factor to 128
	// as we use 16M Hz crystal ADC pulses will be 125K Hz
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
     7cc:	e6 e2       	ldi	r30, 0x26	; 38
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	80 81       	ld	r24, Z
     7d2:	84 60       	ori	r24, 0x04	; 4
     7d4:	80 83       	st	Z, r24
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
     7d6:	80 81       	ld	r24, Z
     7d8:	82 60       	ori	r24, 0x02	; 2
     7da:	80 83       	st	Z, r24
	SET_BIT(ADCSRA_REG,ADPS0_BIT);
     7dc:	80 81       	ld	r24, Z
     7de:	81 60       	ori	r24, 0x01	; 1
     7e0:	80 83       	st	Z, r24

	// to enable ADC Auto Trigger
	SET_BIT(ADCSRA_REG,ADATE_BIT);
     7e2:	80 81       	ld	r24, Z
     7e4:	80 62       	ori	r24, 0x20	; 32
     7e6:	80 83       	st	Z, r24

	// to enable ADC circuit
	SET_BIT(ADCSRA_REG,ADEN_BIT);
     7e8:	80 81       	ld	r24, Z
     7ea:	80 68       	ori	r24, 0x80	; 128
     7ec:	80 83       	st	Z, r24
}
     7ee:	08 95       	ret

000007f0 <M_ADC_u16_Read>:

u16 M_ADC_u16_Read(void)
{
	// to start conversion
	SET_BIT(ADCSRA_REG,ADSC_BIT);
     7f0:	e6 e2       	ldi	r30, 0x26	; 38
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	80 81       	ld	r24, Z
     7f6:	80 64       	ori	r24, 0x40	; 64
     7f8:	80 83       	st	Z, r24
	/*ADIF_BIT is set when an ADC conversion completes
	 * and the Data Registers are updated.
	 **/
	while(GET_BIT(ADCSRA_REG,ADIF_BIT)==0);
     7fa:	80 81       	ld	r24, Z
     7fc:	84 ff       	sbrs	r24, 4
     7fe:	fd cf       	rjmp	.-6      	; 0x7fa <M_ADC_u16_Read+0xa>

	return ADC_Value_REG;
     800:	24 b1       	in	r18, 0x04	; 4
     802:	35 b1       	in	r19, 0x05	; 5
}
     804:	82 2f       	mov	r24, r18
     806:	93 2f       	mov	r25, r19
     808:	08 95       	ret

0000080a <H_TempSensor_u16_Read>:
	 *				ADC Reading								T
	 *
	 *														T= (ADC Reading	*  500) / 1023
	 *
	 */
	u16 Local_u16_Temp = (M_ADC_u16_Read() * (u32)500)/1023;
     80a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <M_ADC_u16_Read>
     80e:	a0 e0       	ldi	r26, 0x00	; 0
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	bc 01       	movw	r22, r24
     814:	cd 01       	movw	r24, r26
     816:	24 ef       	ldi	r18, 0xF4	; 244
     818:	31 e0       	ldi	r19, 0x01	; 1
     81a:	40 e0       	ldi	r20, 0x00	; 0
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsi3>
     822:	2f ef       	ldi	r18, 0xFF	; 255
     824:	33 e0       	ldi	r19, 0x03	; 3
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	0e 94 44 0a 	call	0x1488	; 0x1488 <__udivmodsi4>
     82e:	82 2f       	mov	r24, r18
     830:	93 2f       	mov	r25, r19

	return Local_u16_Temp;

}
     832:	08 95       	ret

00000834 <H_TempSensor_void_Init>:

#include "ADC_Interface.h"

void H_TempSensor_void_Init(void)
{
	M_ADC_void_Init();
     834:	0e 94 cc 03 	call	0x798	; 0x798 <M_ADC_void_Init>
}
     838:	08 95       	ret

0000083a <Hal_Ssd_void_SsdDigitDisplay>:

static void Hal_Ssd_void_SsdDigitDisplay(u8 copy_u8_Number)
{


	switch(copy_u8_Number)
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	09 f4       	brne	.+2      	; 0x840 <Hal_Ssd_void_SsdDigitDisplay+0x6>
     83e:	94 c0       	rjmp	.+296    	; 0x968 <__stack+0x109>
     840:	85 30       	cpi	r24, 0x05	; 5
     842:	58 f4       	brcc	.+22     	; 0x85a <Hal_Ssd_void_SsdDigitDisplay+0x20>
     844:	81 30       	cpi	r24, 0x01	; 1
     846:	c9 f1       	breq	.+114    	; 0x8ba <__stack+0x5b>
     848:	81 30       	cpi	r24, 0x01	; 1
     84a:	d0 f0       	brcs	.+52     	; 0x880 <__stack+0x21>
     84c:	82 30       	cpi	r24, 0x02	; 2
     84e:	09 f4       	brne	.+2      	; 0x852 <Hal_Ssd_void_SsdDigitDisplay+0x18>
     850:	51 c0       	rjmp	.+162    	; 0x8f4 <__stack+0x95>
     852:	83 30       	cpi	r24, 0x03	; 3
     854:	09 f0       	breq	.+2      	; 0x858 <Hal_Ssd_void_SsdDigitDisplay+0x1e>
     856:	35 c1       	rjmp	.+618    	; 0xac2 <__stack+0x263>
     858:	6a c0       	rjmp	.+212    	; 0x92e <__stack+0xcf>
     85a:	87 30       	cpi	r24, 0x07	; 7
     85c:	09 f4       	brne	.+2      	; 0x860 <__stack+0x1>
     85e:	db c0       	rjmp	.+438    	; 0xa16 <__stack+0x1b7>
     860:	88 30       	cpi	r24, 0x08	; 8
     862:	38 f4       	brcc	.+14     	; 0x872 <__stack+0x13>
     864:	85 30       	cpi	r24, 0x05	; 5
     866:	09 f4       	brne	.+2      	; 0x86a <__stack+0xb>
     868:	9c c0       	rjmp	.+312    	; 0x9a2 <__stack+0x143>
     86a:	86 30       	cpi	r24, 0x06	; 6
     86c:	09 f0       	breq	.+2      	; 0x870 <__stack+0x11>
     86e:	29 c1       	rjmp	.+594    	; 0xac2 <__stack+0x263>
     870:	b5 c0       	rjmp	.+362    	; 0x9dc <__stack+0x17d>
     872:	88 30       	cpi	r24, 0x08	; 8
     874:	09 f4       	brne	.+2      	; 0x878 <__stack+0x19>
     876:	ec c0       	rjmp	.+472    	; 0xa50 <__stack+0x1f1>
     878:	89 30       	cpi	r24, 0x09	; 9
     87a:	09 f0       	breq	.+2      	; 0x87e <__stack+0x1f>
     87c:	22 c1       	rjmp	.+580    	; 0xac2 <__stack+0x263>
     87e:	05 c1       	rjmp	.+522    	; 0xa8a <__stack+0x22b>
	{
	case 0:
		M_Dio_pinWrite(SSD_LED_A,HIGH);
     880:	8b e0       	ldi	r24, 0x0B	; 11
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_B,HIGH);
     888:	8c e0       	ldi	r24, 0x0C	; 12
     88a:	61 e0       	ldi	r22, 0x01	; 1
     88c:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_C,HIGH);
     890:	8d e0       	ldi	r24, 0x0D	; 13
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_D,HIGH);
     898:	8e e0       	ldi	r24, 0x0E	; 14
     89a:	61 e0       	ldi	r22, 0x01	; 1
     89c:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_E,HIGH);
     8a0:	8f e0       	ldi	r24, 0x0F	; 15
     8a2:	61 e0       	ldi	r22, 0x01	; 1
     8a4:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_F,HIGH);
     8a8:	80 e1       	ldi	r24, 0x10	; 16
     8aa:	61 e0       	ldi	r22, 0x01	; 1
     8ac:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_G,LOW);
     8b0:	81 e1       	ldi	r24, 0x11	; 17
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     8b8:	08 95       	ret
		break;

	case 1:
		M_Dio_pinWrite(SSD_LED_A,LOW);
     8ba:	8b e0       	ldi	r24, 0x0B	; 11
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_B,HIGH);
     8c2:	8c e0       	ldi	r24, 0x0C	; 12
     8c4:	61 e0       	ldi	r22, 0x01	; 1
     8c6:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_C,HIGH);
     8ca:	8d e0       	ldi	r24, 0x0D	; 13
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_D,LOW);
     8d2:	8e e0       	ldi	r24, 0x0E	; 14
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_E,LOW);
     8da:	8f e0       	ldi	r24, 0x0F	; 15
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_F,LOW);
     8e2:	80 e1       	ldi	r24, 0x10	; 16
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_G,LOW);
     8ea:	81 e1       	ldi	r24, 0x11	; 17
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     8f2:	08 95       	ret
		break;
	case 2:
		M_Dio_pinWrite(SSD_LED_A,HIGH);
     8f4:	8b e0       	ldi	r24, 0x0B	; 11
     8f6:	61 e0       	ldi	r22, 0x01	; 1
     8f8:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_B,HIGH);
     8fc:	8c e0       	ldi	r24, 0x0C	; 12
     8fe:	61 e0       	ldi	r22, 0x01	; 1
     900:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_C,LOW);
     904:	8d e0       	ldi	r24, 0x0D	; 13
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_D,HIGH);
     90c:	8e e0       	ldi	r24, 0x0E	; 14
     90e:	61 e0       	ldi	r22, 0x01	; 1
     910:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_E,HIGH);
     914:	8f e0       	ldi	r24, 0x0F	; 15
     916:	61 e0       	ldi	r22, 0x01	; 1
     918:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_F,LOW);
     91c:	80 e1       	ldi	r24, 0x10	; 16
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_G,HIGH);
     924:	81 e1       	ldi	r24, 0x11	; 17
     926:	61 e0       	ldi	r22, 0x01	; 1
     928:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     92c:	08 95       	ret

		break;
	case 3:
		M_Dio_pinWrite(SSD_LED_A,HIGH);
     92e:	8b e0       	ldi	r24, 0x0B	; 11
     930:	61 e0       	ldi	r22, 0x01	; 1
     932:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_B,HIGH);
     936:	8c e0       	ldi	r24, 0x0C	; 12
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_C,HIGH);
     93e:	8d e0       	ldi	r24, 0x0D	; 13
     940:	61 e0       	ldi	r22, 0x01	; 1
     942:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_D,HIGH);
     946:	8e e0       	ldi	r24, 0x0E	; 14
     948:	61 e0       	ldi	r22, 0x01	; 1
     94a:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_E,LOW);
     94e:	8f e0       	ldi	r24, 0x0F	; 15
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_F,LOW);
     956:	80 e1       	ldi	r24, 0x10	; 16
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_G,HIGH);
     95e:	81 e1       	ldi	r24, 0x11	; 17
     960:	61 e0       	ldi	r22, 0x01	; 1
     962:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     966:	08 95       	ret
		break;
	case 4:
		M_Dio_pinWrite(SSD_LED_A,LOW);
     968:	8b e0       	ldi	r24, 0x0B	; 11
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_B,HIGH);
     970:	8c e0       	ldi	r24, 0x0C	; 12
     972:	61 e0       	ldi	r22, 0x01	; 1
     974:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_C,HIGH);
     978:	8d e0       	ldi	r24, 0x0D	; 13
     97a:	61 e0       	ldi	r22, 0x01	; 1
     97c:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_D,LOW);
     980:	8e e0       	ldi	r24, 0x0E	; 14
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_E,LOW);
     988:	8f e0       	ldi	r24, 0x0F	; 15
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_F,HIGH);
     990:	80 e1       	ldi	r24, 0x10	; 16
     992:	61 e0       	ldi	r22, 0x01	; 1
     994:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_G,HIGH);
     998:	81 e1       	ldi	r24, 0x11	; 17
     99a:	61 e0       	ldi	r22, 0x01	; 1
     99c:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     9a0:	08 95       	ret
		break;
	case 5:
		M_Dio_pinWrite(SSD_LED_A,HIGH);
     9a2:	8b e0       	ldi	r24, 0x0B	; 11
     9a4:	61 e0       	ldi	r22, 0x01	; 1
     9a6:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_B,LOW);
     9aa:	8c e0       	ldi	r24, 0x0C	; 12
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_C,HIGH);
     9b2:	8d e0       	ldi	r24, 0x0D	; 13
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_D,HIGH);
     9ba:	8e e0       	ldi	r24, 0x0E	; 14
     9bc:	61 e0       	ldi	r22, 0x01	; 1
     9be:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_E,LOW);
     9c2:	8f e0       	ldi	r24, 0x0F	; 15
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_F,HIGH);
     9ca:	80 e1       	ldi	r24, 0x10	; 16
     9cc:	61 e0       	ldi	r22, 0x01	; 1
     9ce:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_G,HIGH);
     9d2:	81 e1       	ldi	r24, 0x11	; 17
     9d4:	61 e0       	ldi	r22, 0x01	; 1
     9d6:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     9da:	08 95       	ret
		break;
	case 6:
		M_Dio_pinWrite(SSD_LED_A,HIGH);
     9dc:	8b e0       	ldi	r24, 0x0B	; 11
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_B,LOW);
     9e4:	8c e0       	ldi	r24, 0x0C	; 12
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_C,HIGH);
     9ec:	8d e0       	ldi	r24, 0x0D	; 13
     9ee:	61 e0       	ldi	r22, 0x01	; 1
     9f0:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_D,HIGH);
     9f4:	8e e0       	ldi	r24, 0x0E	; 14
     9f6:	61 e0       	ldi	r22, 0x01	; 1
     9f8:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_E,HIGH);
     9fc:	8f e0       	ldi	r24, 0x0F	; 15
     9fe:	61 e0       	ldi	r22, 0x01	; 1
     a00:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_F,HIGH);
     a04:	80 e1       	ldi	r24, 0x10	; 16
     a06:	61 e0       	ldi	r22, 0x01	; 1
     a08:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_G,HIGH);
     a0c:	81 e1       	ldi	r24, 0x11	; 17
     a0e:	61 e0       	ldi	r22, 0x01	; 1
     a10:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     a14:	08 95       	ret
		break;
	case 7:
		M_Dio_pinWrite(SSD_LED_A,HIGH);
     a16:	8b e0       	ldi	r24, 0x0B	; 11
     a18:	61 e0       	ldi	r22, 0x01	; 1
     a1a:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_B,HIGH);
     a1e:	8c e0       	ldi	r24, 0x0C	; 12
     a20:	61 e0       	ldi	r22, 0x01	; 1
     a22:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_C,HIGH);
     a26:	8d e0       	ldi	r24, 0x0D	; 13
     a28:	61 e0       	ldi	r22, 0x01	; 1
     a2a:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_D,LOW);
     a2e:	8e e0       	ldi	r24, 0x0E	; 14
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_E,LOW);
     a36:	8f e0       	ldi	r24, 0x0F	; 15
     a38:	60 e0       	ldi	r22, 0x00	; 0
     a3a:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_F,LOW);
     a3e:	80 e1       	ldi	r24, 0x10	; 16
     a40:	60 e0       	ldi	r22, 0x00	; 0
     a42:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_G,LOW);
     a46:	81 e1       	ldi	r24, 0x11	; 17
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     a4e:	08 95       	ret
		break;
	case 8:
		M_Dio_pinWrite(SSD_LED_A,HIGH);
     a50:	8b e0       	ldi	r24, 0x0B	; 11
     a52:	61 e0       	ldi	r22, 0x01	; 1
     a54:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_B,HIGH);
     a58:	8c e0       	ldi	r24, 0x0C	; 12
     a5a:	61 e0       	ldi	r22, 0x01	; 1
     a5c:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_C,HIGH);
     a60:	8d e0       	ldi	r24, 0x0D	; 13
     a62:	61 e0       	ldi	r22, 0x01	; 1
     a64:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_D,HIGH);
     a68:	8e e0       	ldi	r24, 0x0E	; 14
     a6a:	61 e0       	ldi	r22, 0x01	; 1
     a6c:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_E,HIGH);
     a70:	8f e0       	ldi	r24, 0x0F	; 15
     a72:	61 e0       	ldi	r22, 0x01	; 1
     a74:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_F,HIGH);
     a78:	80 e1       	ldi	r24, 0x10	; 16
     a7a:	61 e0       	ldi	r22, 0x01	; 1
     a7c:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_G,HIGH);
     a80:	81 e1       	ldi	r24, 0x11	; 17
     a82:	61 e0       	ldi	r22, 0x01	; 1
     a84:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     a88:	08 95       	ret
		break;
	case 9:
		M_Dio_pinWrite(SSD_LED_A,HIGH);
     a8a:	8b e0       	ldi	r24, 0x0B	; 11
     a8c:	61 e0       	ldi	r22, 0x01	; 1
     a8e:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_B,HIGH);
     a92:	8c e0       	ldi	r24, 0x0C	; 12
     a94:	61 e0       	ldi	r22, 0x01	; 1
     a96:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_C,HIGH);
     a9a:	8d e0       	ldi	r24, 0x0D	; 13
     a9c:	61 e0       	ldi	r22, 0x01	; 1
     a9e:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_D,HIGH);
     aa2:	8e e0       	ldi	r24, 0x0E	; 14
     aa4:	61 e0       	ldi	r22, 0x01	; 1
     aa6:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_E,LOW);
     aaa:	8f e0       	ldi	r24, 0x0F	; 15
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_F,HIGH);
     ab2:	80 e1       	ldi	r24, 0x10	; 16
     ab4:	61 e0       	ldi	r22, 0x01	; 1
     ab6:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
		M_Dio_pinWrite(SSD_LED_G,HIGH);
     aba:	81 e1       	ldi	r24, 0x11	; 17
     abc:	61 e0       	ldi	r22, 0x01	; 1
     abe:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     ac2:	08 95       	ret

00000ac4 <Hal_Ssd_void_SsdDisplay>:
	M_Dio_pinMode(SSD_2_EN,OUTPUT);


}
void Hal_Ssd_void_SsdDisplay(u8 copy_u8_Number)
{
     ac4:	ef 92       	push	r14
     ac6:	ff 92       	push	r15
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	28 2f       	mov	r18, r24
	u8 Local_u8_Units = copy_u8_Number % 10;
     ad2:	6a e0       	ldi	r22, 0x0A	; 10
     ad4:	0e 94 25 0a 	call	0x144a	; 0x144a <__udivmodqi4>
     ad8:	e9 2e       	mov	r14, r25
	u8 Local_u8_Tens  = copy_u8_Number / 10;
     ada:	82 2f       	mov	r24, r18
     adc:	0e 94 25 0a 	call	0x144a	; 0x144a <__udivmodqi4>
     ae0:	f8 2e       	mov	r15, r24
     ae2:	c0 e0       	ldi	r28, 0x00	; 0
     ae4:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ae6:	00 ea       	ldi	r16, 0xA0	; 160
     ae8:	1f e0       	ldi	r17, 0x0F	; 15



	for(Local_u16_Counter = 0;Local_u16_Counter<400;Local_u16_Counter++)
	{
		Hal_Ssd_void_SsdDigitDisplay(Local_u8_Units);
     aea:	8e 2d       	mov	r24, r14
     aec:	0e 94 1d 04 	call	0x83a	; 0x83a <Hal_Ssd_void_SsdDigitDisplay>

		M_Dio_pinWrite(SSD_1_EN,HIGH);
     af0:	84 e2       	ldi	r24, 0x24	; 36
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     af8:	c8 01       	movw	r24, r16
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <Hal_Ssd_void_SsdDisplay+0x36>
		_delay_ms(1);
		M_Dio_pinWrite(SSD_1_EN,LOW);
     afe:	84 e2       	ldi	r24, 0x24	; 36
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>

		Hal_Ssd_void_SsdDigitDisplay(Local_u8_Tens);
     b06:	8f 2d       	mov	r24, r15
     b08:	0e 94 1d 04 	call	0x83a	; 0x83a <Hal_Ssd_void_SsdDigitDisplay>

		M_Dio_pinWrite(SSD_2_EN,HIGH);
     b0c:	85 e2       	ldi	r24, 0x25	; 37
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     b14:	c8 01       	movw	r24, r16
     b16:	01 97       	sbiw	r24, 0x01	; 1
     b18:	f1 f7       	brne	.-4      	; 0xb16 <Hal_Ssd_void_SsdDisplay+0x52>
		_delay_ms(1);
		M_Dio_pinWrite(SSD_2_EN,LOW);
     b1a:	85 e2       	ldi	r24, 0x25	; 37
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
	u8 Local_u8_Tens  = copy_u8_Number / 10;
	u16 Local_u16_Counter = 0;



	for(Local_u16_Counter = 0;Local_u16_Counter<400;Local_u16_Counter++)
     b22:	21 96       	adiw	r28, 0x01	; 1
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	c0 39       	cpi	r28, 0x90	; 144
     b28:	d8 07       	cpc	r29, r24
     b2a:	f9 f6       	brne	.-66     	; 0xaea <Hal_Ssd_void_SsdDisplay+0x26>
		_delay_ms(1);
		M_Dio_pinWrite(SSD_2_EN,LOW);
	}


}
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	ff 90       	pop	r15
     b36:	ef 90       	pop	r14
     b38:	08 95       	ret

00000b3a <Hal_Ssd_void_SsdCountDown>:
		Hal_Ssd_void_SsdDisplay(Local_u8_Counter);

	}
}
void Hal_Ssd_void_SsdCountDown(u8 copy_u8_Number)
{
     b3a:	1f 93       	push	r17
     b3c:	18 2f       	mov	r17, r24
	s8 Local_s8_Counter;

	for(Local_s8_Counter=copy_u8_Number;Local_s8_Counter>=0;Local_s8_Counter--)
     b3e:	88 23       	and	r24, r24
     b40:	2c f0       	brlt	.+10     	; 0xb4c <Hal_Ssd_void_SsdCountDown+0x12>
	{
		Hal_Ssd_void_SsdDisplay(Local_s8_Counter);
     b42:	81 2f       	mov	r24, r17
     b44:	0e 94 62 05 	call	0xac4	; 0xac4 <Hal_Ssd_void_SsdDisplay>
}
void Hal_Ssd_void_SsdCountDown(u8 copy_u8_Number)
{
	s8 Local_s8_Counter;

	for(Local_s8_Counter=copy_u8_Number;Local_s8_Counter>=0;Local_s8_Counter--)
     b48:	11 50       	subi	r17, 0x01	; 1
     b4a:	da f7       	brpl	.-10     	; 0xb42 <Hal_Ssd_void_SsdCountDown+0x8>
	{
		Hal_Ssd_void_SsdDisplay(Local_s8_Counter);
	}
}
     b4c:	1f 91       	pop	r17
     b4e:	08 95       	ret

00000b50 <Hal_Ssd_void_SsdCountUp>:
}



void Hal_Ssd_void_SsdCountUp(u8 copy_u8_Number)
{
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	08 2f       	mov	r16, r24
     b56:	10 e0       	ldi	r17, 0x00	; 0
	u8 Local_u8_Counter = 0;

	for(Local_u8_Counter = 0;Local_u8_Counter<=copy_u8_Number;Local_u8_Counter++)
	{
		Hal_Ssd_void_SsdDisplay(Local_u8_Counter);
     b58:	81 2f       	mov	r24, r17
     b5a:	0e 94 62 05 	call	0xac4	; 0xac4 <Hal_Ssd_void_SsdDisplay>

void Hal_Ssd_void_SsdCountUp(u8 copy_u8_Number)
{
	u8 Local_u8_Counter = 0;

	for(Local_u8_Counter = 0;Local_u8_Counter<=copy_u8_Number;Local_u8_Counter++)
     b5e:	1f 5f       	subi	r17, 0xFF	; 255
     b60:	01 17       	cp	r16, r17
     b62:	d0 f7       	brcc	.-12     	; 0xb58 <Hal_Ssd_void_SsdCountUp+0x8>
	{
		Hal_Ssd_void_SsdDisplay(Local_u8_Counter);

	}
}
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	08 95       	ret

00000b6a <Hal_Ssd_void_SsdInit>:
#include "Ssd_Private.h"


void Hal_Ssd_void_SsdInit(void)
{
	M_Dio_pinMode(SSD_LED_A,OUTPUT);
     b6a:	8b e0       	ldi	r24, 0x0B	; 11
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>
	M_Dio_pinMode(SSD_LED_B,OUTPUT);
     b72:	8c e0       	ldi	r24, 0x0C	; 12
     b74:	61 e0       	ldi	r22, 0x01	; 1
     b76:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>
	M_Dio_pinMode(SSD_LED_C,OUTPUT);
     b7a:	8d e0       	ldi	r24, 0x0D	; 13
     b7c:	61 e0       	ldi	r22, 0x01	; 1
     b7e:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>
	M_Dio_pinMode(SSD_LED_D,OUTPUT);
     b82:	8e e0       	ldi	r24, 0x0E	; 14
     b84:	61 e0       	ldi	r22, 0x01	; 1
     b86:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>
	M_Dio_pinMode(SSD_LED_E,OUTPUT);
     b8a:	8f e0       	ldi	r24, 0x0F	; 15
     b8c:	61 e0       	ldi	r22, 0x01	; 1
     b8e:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>
	M_Dio_pinMode(SSD_LED_F,OUTPUT);
     b92:	80 e1       	ldi	r24, 0x10	; 16
     b94:	61 e0       	ldi	r22, 0x01	; 1
     b96:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>
	M_Dio_pinMode(SSD_LED_G,OUTPUT);
     b9a:	81 e1       	ldi	r24, 0x11	; 17
     b9c:	61 e0       	ldi	r22, 0x01	; 1
     b9e:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>

	M_Dio_pinMode(SSD_1_EN,OUTPUT);
     ba2:	84 e2       	ldi	r24, 0x24	; 36
     ba4:	61 e0       	ldi	r22, 0x01	; 1
     ba6:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>
	M_Dio_pinMode(SSD_2_EN,OUTPUT);
     baa:	85 e2       	ldi	r24, 0x25	; 37
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>


}
     bb2:	08 95       	ret

00000bb4 <H_PushBubtton_void_PushButtonRead>:


/**************************************************************************************************/

u8 H_PushBubtton_void_PushButtonRead(u8 copy_u8_PushButton)
{
     bb4:	1f 93       	push	r17

	u8 local_u8_Reading=RELEASED;

	switch(copy_u8_PushButton)
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	69 f1       	breq	.+90     	; 0xc14 <H_PushBubtton_void_PushButtonRead+0x60>
     bba:	83 30       	cpi	r24, 0x03	; 3
     bbc:	18 f4       	brcc	.+6      	; 0xbc4 <H_PushBubtton_void_PushButtonRead+0x10>
     bbe:	81 30       	cpi	r24, 0x01	; 1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <H_PushBubtton_void_PushButtonRead+0x1c>
     bc2:	08 c0       	rjmp	.+16     	; 0xbd4 <H_PushBubtton_void_PushButtonRead+0x20>
     bc4:	83 30       	cpi	r24, 0x03	; 3
     bc6:	09 f4       	brne	.+2      	; 0xbca <H_PushBubtton_void_PushButtonRead+0x16>
     bc8:	45 c0       	rjmp	.+138    	; 0xc54 <H_PushBubtton_void_PushButtonRead+0xa0>
     bca:	84 30       	cpi	r24, 0x04	; 4
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <H_PushBubtton_void_PushButtonRead+0x1c>
     bce:	60 c0       	rjmp	.+192    	; 0xc90 <H_PushBubtton_void_PushButtonRead+0xdc>
     bd0:	11 e0       	ldi	r17, 0x01	; 1
     bd2:	7c c0       	rjmp	.+248    	; 0xccc <H_PushBubtton_void_PushButtonRead+0x118>
	{
	case PUSH_BUTTON_1:
		local_u8_Reading = M_Dio_pinRead(PUSH_BUTTON_1_PIN);
     bd4:	8a e2       	ldi	r24, 0x2A	; 42
     bd6:	0e 94 4b 03 	call	0x696	; 0x696 <M_Dio_pinRead>
     bda:	18 2f       	mov	r17, r24

		if(M_Dio_pinRead(PUSH_BUTTON_1_PIN)==PRESSED)
     bdc:	8a e2       	ldi	r24, 0x2A	; 42
     bde:	0e 94 4b 03 	call	0x696	; 0x696 <M_Dio_pinRead>
     be2:	88 23       	and	r24, r24
     be4:	09 f0       	breq	.+2      	; 0xbe8 <H_PushBubtton_void_PushButtonRead+0x34>
     be6:	72 c0       	rjmp	.+228    	; 0xccc <H_PushBubtton_void_PushButtonRead+0x118>
     be8:	20 e2       	ldi	r18, 0x20	; 32
     bea:	33 e0       	ldi	r19, 0x03	; 3
     bec:	40 e9       	ldi	r20, 0x90	; 144
     bee:	51 e0       	ldi	r21, 0x01	; 1
     bf0:	ca 01       	movw	r24, r20
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	f1 f7       	brne	.-4      	; 0xbf2 <H_PushBubtton_void_PushButtonRead+0x3e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bf6:	21 50       	subi	r18, 0x01	; 1
     bf8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bfa:	d1 f7       	brne	.-12     	; 0xbf0 <H_PushBubtton_void_PushButtonRead+0x3c>
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME); //delay to debouncing
			if(M_Dio_pinRead(PUSH_BUTTON_1_PIN)==PRESSED)//
     bfc:	8a e2       	ldi	r24, 0x2A	; 42
     bfe:	0e 94 4b 03 	call	0x696	; 0x696 <M_Dio_pinRead>
     c02:	88 23       	and	r24, r24
     c04:	09 f0       	breq	.+2      	; 0xc08 <H_PushBubtton_void_PushButtonRead+0x54>
     c06:	62 c0       	rjmp	.+196    	; 0xccc <H_PushBubtton_void_PushButtonRead+0x118>
			{
				local_u8_Reading= PRESSED;
				while(M_Dio_pinRead(PUSH_BUTTON_1_PIN)==PRESSED);//stuck here while PUSH BUTTON is pressed
     c08:	8a e2       	ldi	r24, 0x2A	; 42
     c0a:	0e 94 4b 03 	call	0x696	; 0x696 <M_Dio_pinRead>
     c0e:	88 23       	and	r24, r24
     c10:	d9 f3       	breq	.-10     	; 0xc08 <H_PushBubtton_void_PushButtonRead+0x54>
     c12:	5b c0       	rjmp	.+182    	; 0xcca <H_PushBubtton_void_PushButtonRead+0x116>
			}
		}
		break;
	case PUSH_BUTTON_2:
		local_u8_Reading = M_Dio_pinRead(PUSH_BUTTON_2_PIN);
     c14:	8b e2       	ldi	r24, 0x2B	; 43
     c16:	0e 94 4b 03 	call	0x696	; 0x696 <M_Dio_pinRead>
     c1a:	18 2f       	mov	r17, r24
		if(M_Dio_pinRead(PUSH_BUTTON_2_PIN)==PRESSED)
     c1c:	8b e2       	ldi	r24, 0x2B	; 43
     c1e:	0e 94 4b 03 	call	0x696	; 0x696 <M_Dio_pinRead>
     c22:	88 23       	and	r24, r24
     c24:	09 f0       	breq	.+2      	; 0xc28 <H_PushBubtton_void_PushButtonRead+0x74>
     c26:	52 c0       	rjmp	.+164    	; 0xccc <H_PushBubtton_void_PushButtonRead+0x118>
     c28:	20 e2       	ldi	r18, 0x20	; 32
     c2a:	33 e0       	ldi	r19, 0x03	; 3
     c2c:	40 e9       	ldi	r20, 0x90	; 144
     c2e:	51 e0       	ldi	r21, 0x01	; 1
     c30:	ca 01       	movw	r24, r20
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	f1 f7       	brne	.-4      	; 0xc32 <H_PushBubtton_void_PushButtonRead+0x7e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c36:	21 50       	subi	r18, 0x01	; 1
     c38:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c3a:	d1 f7       	brne	.-12     	; 0xc30 <H_PushBubtton_void_PushButtonRead+0x7c>
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_Dio_pinRead(PUSH_BUTTON_2_PIN)==PRESSED)
     c3c:	8b e2       	ldi	r24, 0x2B	; 43
     c3e:	0e 94 4b 03 	call	0x696	; 0x696 <M_Dio_pinRead>
     c42:	88 23       	and	r24, r24
     c44:	09 f0       	breq	.+2      	; 0xc48 <H_PushBubtton_void_PushButtonRead+0x94>
     c46:	42 c0       	rjmp	.+132    	; 0xccc <H_PushBubtton_void_PushButtonRead+0x118>
			{
				local_u8_Reading= PRESSED;
				while(M_Dio_pinRead(PUSH_BUTTON_2_PIN)==PRESSED);
     c48:	8b e2       	ldi	r24, 0x2B	; 43
     c4a:	0e 94 4b 03 	call	0x696	; 0x696 <M_Dio_pinRead>
     c4e:	88 23       	and	r24, r24
     c50:	d9 f3       	breq	.-10     	; 0xc48 <H_PushBubtton_void_PushButtonRead+0x94>
     c52:	3b c0       	rjmp	.+118    	; 0xcca <H_PushBubtton_void_PushButtonRead+0x116>
			}
		}

		break;
	case PUSH_BUTTON_3:
		local_u8_Reading= M_Dio_pinRead(PUSH_BUTTON_3_PIN);
     c54:	8c e2       	ldi	r24, 0x2C	; 44
     c56:	0e 94 4b 03 	call	0x696	; 0x696 <M_Dio_pinRead>
     c5a:	18 2f       	mov	r17, r24
		if(M_Dio_pinRead(PUSH_BUTTON_3_PIN)==PRESSED)
     c5c:	8c e2       	ldi	r24, 0x2C	; 44
     c5e:	0e 94 4b 03 	call	0x696	; 0x696 <M_Dio_pinRead>
     c62:	88 23       	and	r24, r24
     c64:	99 f5       	brne	.+102    	; 0xccc <H_PushBubtton_void_PushButtonRead+0x118>
     c66:	20 e2       	ldi	r18, 0x20	; 32
     c68:	33 e0       	ldi	r19, 0x03	; 3
     c6a:	40 e9       	ldi	r20, 0x90	; 144
     c6c:	51 e0       	ldi	r21, 0x01	; 1
     c6e:	ca 01       	movw	r24, r20
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	f1 f7       	brne	.-4      	; 0xc70 <H_PushBubtton_void_PushButtonRead+0xbc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c74:	21 50       	subi	r18, 0x01	; 1
     c76:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c78:	d1 f7       	brne	.-12     	; 0xc6e <H_PushBubtton_void_PushButtonRead+0xba>
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_Dio_pinRead(PUSH_BUTTON_3_PIN)==PRESSED)
     c7a:	8c e2       	ldi	r24, 0x2C	; 44
     c7c:	0e 94 4b 03 	call	0x696	; 0x696 <M_Dio_pinRead>
     c80:	88 23       	and	r24, r24
     c82:	21 f5       	brne	.+72     	; 0xccc <H_PushBubtton_void_PushButtonRead+0x118>
			{
				local_u8_Reading= PRESSED;
				while(M_Dio_pinRead(PUSH_BUTTON_3_PIN)==PRESSED);
     c84:	8c e2       	ldi	r24, 0x2C	; 44
     c86:	0e 94 4b 03 	call	0x696	; 0x696 <M_Dio_pinRead>
     c8a:	88 23       	and	r24, r24
     c8c:	d9 f3       	breq	.-10     	; 0xc84 <H_PushBubtton_void_PushButtonRead+0xd0>
     c8e:	1d c0       	rjmp	.+58     	; 0xcca <H_PushBubtton_void_PushButtonRead+0x116>
			}
		}

		break;
	case PUSH_BUTTON_4:
		local_u8_Reading = M_Dio_pinRead(PUSH_BUTTON_4_PIN);
     c90:	8d e2       	ldi	r24, 0x2D	; 45
     c92:	0e 94 4b 03 	call	0x696	; 0x696 <M_Dio_pinRead>
     c96:	18 2f       	mov	r17, r24
		if(M_Dio_pinRead(PUSH_BUTTON_4_PIN)==PRESSED)
     c98:	8d e2       	ldi	r24, 0x2D	; 45
     c9a:	0e 94 4b 03 	call	0x696	; 0x696 <M_Dio_pinRead>
     c9e:	88 23       	and	r24, r24
     ca0:	a9 f4       	brne	.+42     	; 0xccc <H_PushBubtton_void_PushButtonRead+0x118>
     ca2:	20 e2       	ldi	r18, 0x20	; 32
     ca4:	33 e0       	ldi	r19, 0x03	; 3
     ca6:	40 e9       	ldi	r20, 0x90	; 144
     ca8:	51 e0       	ldi	r21, 0x01	; 1
     caa:	ca 01       	movw	r24, r20
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	f1 f7       	brne	.-4      	; 0xcac <H_PushBubtton_void_PushButtonRead+0xf8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb0:	21 50       	subi	r18, 0x01	; 1
     cb2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <H_PushBubtton_void_PushButtonRead+0xf6>
		{
			_delay_ms(PUSH_BUTTON_DEBOUNCING_TIME);
			if(M_Dio_pinRead(PUSH_BUTTON_4_PIN)==PRESSED)
     cb6:	8d e2       	ldi	r24, 0x2D	; 45
     cb8:	0e 94 4b 03 	call	0x696	; 0x696 <M_Dio_pinRead>
     cbc:	88 23       	and	r24, r24
     cbe:	31 f4       	brne	.+12     	; 0xccc <H_PushBubtton_void_PushButtonRead+0x118>
			{
				local_u8_Reading= PRESSED;
				while(M_Dio_pinRead(PUSH_BUTTON_4_PIN)==PRESSED);
     cc0:	8d e2       	ldi	r24, 0x2D	; 45
     cc2:	0e 94 4b 03 	call	0x696	; 0x696 <M_Dio_pinRead>
     cc6:	88 23       	and	r24, r24
     cc8:	d9 f3       	breq	.-10     	; 0xcc0 <H_PushBubtton_void_PushButtonRead+0x10c>
     cca:	10 e0       	ldi	r17, 0x00	; 0
		break;
	default:break;
	}
	return local_u8_Reading;

}
     ccc:	81 2f       	mov	r24, r17
     cce:	1f 91       	pop	r17
     cd0:	08 95       	ret

00000cd2 <H_PushBubtton_void_PushButtonInit>:
/****************************************Functions****************************************/


void H_PushBubtton_void_PushButtonInit(u8 copy_u8_PushButton)
{
	switch(copy_u8_PushButton)
     cd2:	82 30       	cpi	r24, 0x02	; 2
     cd4:	79 f0       	breq	.+30     	; 0xcf4 <H_PushBubtton_void_PushButtonInit+0x22>
     cd6:	83 30       	cpi	r24, 0x03	; 3
     cd8:	18 f4       	brcc	.+6      	; 0xce0 <H_PushBubtton_void_PushButtonInit+0xe>
     cda:	81 30       	cpi	r24, 0x01	; 1
     cdc:	c9 f4       	brne	.+50     	; 0xd10 <H_PushBubtton_void_PushButtonInit+0x3e>
     cde:	05 c0       	rjmp	.+10     	; 0xcea <H_PushBubtton_void_PushButtonInit+0x18>
     ce0:	83 30       	cpi	r24, 0x03	; 3
     ce2:	69 f0       	breq	.+26     	; 0xcfe <H_PushBubtton_void_PushButtonInit+0x2c>
     ce4:	84 30       	cpi	r24, 0x04	; 4
     ce6:	a1 f4       	brne	.+40     	; 0xd10 <H_PushBubtton_void_PushButtonInit+0x3e>
     ce8:	0f c0       	rjmp	.+30     	; 0xd08 <H_PushBubtton_void_PushButtonInit+0x36>
	{
	case PUSH_BUTTON_1:M_Dio_pinWrite(PUSH_BUTTON_1_PIN,INPUT);	break;
     cea:	8a e2       	ldi	r24, 0x2A	; 42
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     cf2:	08 95       	ret
	case PUSH_BUTTON_2:M_Dio_pinWrite(PUSH_BUTTON_2_PIN,INPUT);	break;
     cf4:	8b e2       	ldi	r24, 0x2B	; 43
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     cfc:	08 95       	ret
	case PUSH_BUTTON_3:M_Dio_pinWrite(PUSH_BUTTON_3_PIN,INPUT);	break;
     cfe:	8c e2       	ldi	r24, 0x2C	; 44
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     d06:	08 95       	ret
	case PUSH_BUTTON_4:M_Dio_pinWrite(PUSH_BUTTON_4_PIN,INPUT);	break;
     d08:	8d e2       	ldi	r24, 0x2D	; 45
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     d10:	08 95       	ret

00000d12 <H_Led_void_LedBlinkOnce>:
				}
}
void H_Led_void_LedBlinkOnce(u8 copy_u8_led)
{

	switch(copy_u8_led)
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	c9 f0       	breq	.+50     	; 0xd48 <H_Led_void_LedBlinkOnce+0x36>
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	20 f0       	brcs	.+8      	; 0xd22 <H_Led_void_LedBlinkOnce+0x10>
     d1a:	82 30       	cpi	r24, 0x02	; 2
     d1c:	09 f0       	breq	.+2      	; 0xd20 <H_Led_void_LedBlinkOnce+0xe>
     d1e:	39 c0       	rjmp	.+114    	; 0xd92 <H_Led_void_LedBlinkOnce+0x80>
     d20:	26 c0       	rjmp	.+76     	; 0xd6e <H_Led_void_LedBlinkOnce+0x5c>
					{
					case RED_LED:
						M_Dio_pinWrite(RED_LED_PIN,HIGH);
     d22:	8e e1       	ldi	r24, 0x1E	; 30
     d24:	61 e0       	ldi	r22, 0x01	; 1
     d26:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     d2a:	28 ee       	ldi	r18, 0xE8	; 232
     d2c:	33 e0       	ldi	r19, 0x03	; 3
     d2e:	40 e9       	ldi	r20, 0x90	; 144
     d30:	51 e0       	ldi	r21, 0x01	; 1
     d32:	ca 01       	movw	r24, r20
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	f1 f7       	brne	.-4      	; 0xd34 <H_Led_void_LedBlinkOnce+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d38:	21 50       	subi	r18, 0x01	; 1
     d3a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d3c:	d1 f7       	brne	.-12     	; 0xd32 <H_Led_void_LedBlinkOnce+0x20>
						_delay_ms(LED_TIME_ON);
						M_Dio_pinWrite(RED_LED_PIN,LOW);
     d3e:	8e e1       	ldi	r24, 0x1E	; 30
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     d46:	08 95       	ret
						break;
					case GREEN_LED:
						M_Dio_pinWrite(GRN_LED_PIN,HIGH);
     d48:	8f e1       	ldi	r24, 0x1F	; 31
     d4a:	61 e0       	ldi	r22, 0x01	; 1
     d4c:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     d50:	28 ee       	ldi	r18, 0xE8	; 232
     d52:	33 e0       	ldi	r19, 0x03	; 3
     d54:	40 e9       	ldi	r20, 0x90	; 144
     d56:	51 e0       	ldi	r21, 0x01	; 1
     d58:	ca 01       	movw	r24, r20
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	f1 f7       	brne	.-4      	; 0xd5a <H_Led_void_LedBlinkOnce+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d5e:	21 50       	subi	r18, 0x01	; 1
     d60:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d62:	d1 f7       	brne	.-12     	; 0xd58 <H_Led_void_LedBlinkOnce+0x46>
						_delay_ms(LED_TIME_ON);
						M_Dio_pinWrite(GRN_LED_PIN,LOW);
     d64:	8f e1       	ldi	r24, 0x1F	; 31
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     d6c:	08 95       	ret
						break;
					case BLUE_LED:
						M_Dio_pinWrite(BLU_LED_PIN,HIGH);
     d6e:	80 e2       	ldi	r24, 0x20	; 32
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     d76:	28 ee       	ldi	r18, 0xE8	; 232
     d78:	33 e0       	ldi	r19, 0x03	; 3
     d7a:	40 e9       	ldi	r20, 0x90	; 144
     d7c:	51 e0       	ldi	r21, 0x01	; 1
     d7e:	ca 01       	movw	r24, r20
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	f1 f7       	brne	.-4      	; 0xd80 <H_Led_void_LedBlinkOnce+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d84:	21 50       	subi	r18, 0x01	; 1
     d86:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d88:	d1 f7       	brne	.-12     	; 0xd7e <H_Led_void_LedBlinkOnce+0x6c>
						_delay_ms(LED_TIME_ON);
						M_Dio_pinWrite(BLU_LED_PIN,LOW);
     d8a:	80 e2       	ldi	r24, 0x20	; 32
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     d92:	08 95       	ret

00000d94 <H_Led_void_LedBlinkTwice>:
					}


}
void H_Led_void_LedBlinkTwice(u8 copy_u8_led)
{
     d94:	1f 93       	push	r17
     d96:	18 2f       	mov	r17, r24
	H_Led_void_LedBlinkOnce( copy_u8_led);
     d98:	0e 94 89 06 	call	0xd12	; 0xd12 <H_Led_void_LedBlinkOnce>
     d9c:	28 ee       	ldi	r18, 0xE8	; 232
     d9e:	33 e0       	ldi	r19, 0x03	; 3
     da0:	40 e9       	ldi	r20, 0x90	; 144
     da2:	51 e0       	ldi	r21, 0x01	; 1
     da4:	ca 01       	movw	r24, r20
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <H_Led_void_LedBlinkTwice+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     daa:	21 50       	subi	r18, 0x01	; 1
     dac:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dae:	d1 f7       	brne	.-12     	; 0xda4 <H_Led_void_LedBlinkTwice+0x10>
	_delay_ms(100);
	H_Led_void_LedBlinkOnce( copy_u8_led);
     db0:	81 2f       	mov	r24, r17
     db2:	0e 94 89 06 	call	0xd12	; 0xd12 <H_Led_void_LedBlinkOnce>
     db6:	28 ee       	ldi	r18, 0xE8	; 232
     db8:	33 e0       	ldi	r19, 0x03	; 3
     dba:	40 e9       	ldi	r20, 0x90	; 144
     dbc:	51 e0       	ldi	r21, 0x01	; 1
     dbe:	ca 01       	movw	r24, r20
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <H_Led_void_LedBlinkTwice+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc4:	21 50       	subi	r18, 0x01	; 1
     dc6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc8:	d1 f7       	brne	.-12     	; 0xdbe <H_Led_void_LedBlinkTwice+0x2a>
	_delay_ms(100);
}
     dca:	1f 91       	pop	r17
     dcc:	08 95       	ret

00000dce <H_Led_void_LedOff>:

		}
}
void H_Led_void_LedOff(u8 copy_u8_led)
{
	switch(copy_u8_led)
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	51 f0       	breq	.+20     	; 0xde6 <H_Led_void_LedOff+0x18>
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	18 f0       	brcs	.+6      	; 0xddc <H_Led_void_LedOff+0xe>
     dd6:	82 30       	cpi	r24, 0x02	; 2
     dd8:	79 f4       	brne	.+30     	; 0xdf8 <H_Led_void_LedOff+0x2a>
     dda:	0a c0       	rjmp	.+20     	; 0xdf0 <H_Led_void_LedOff+0x22>
			{
			case RED_LED:		M_Dio_pinWrite(RED_LED_PIN,LOW);							break;
     ddc:	8e e1       	ldi	r24, 0x1E	; 30
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     de4:	08 95       	ret
			case GREEN_LED:		M_Dio_pinWrite(GRN_LED_PIN,LOW);							break;
     de6:	8f e1       	ldi	r24, 0x1F	; 31
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     dee:	08 95       	ret
			case BLUE_LED:		M_Dio_pinWrite(BLU_LED_PIN,LOW);							break;
     df0:	80 e2       	ldi	r24, 0x20	; 32
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     df8:	08 95       	ret

00000dfa <H_Led_void_LedOn>:
	}

}
void H_Led_void_LedOn(u8 copy_u8_led)
{
	switch(copy_u8_led)
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	51 f0       	breq	.+20     	; 0xe12 <H_Led_void_LedOn+0x18>
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	18 f0       	brcs	.+6      	; 0xe08 <H_Led_void_LedOn+0xe>
     e02:	82 30       	cpi	r24, 0x02	; 2
     e04:	79 f4       	brne	.+30     	; 0xe24 <H_Led_void_LedOn+0x2a>
     e06:	0a c0       	rjmp	.+20     	; 0xe1c <H_Led_void_LedOn+0x22>
		{
		case RED_LED:		M_Dio_pinWrite(RED_LED_PIN,HIGH);							break;
     e08:	8e e1       	ldi	r24, 0x1E	; 30
     e0a:	61 e0       	ldi	r22, 0x01	; 1
     e0c:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     e10:	08 95       	ret
		case GREEN_LED:		M_Dio_pinWrite(GRN_LED_PIN,HIGH);							break;
     e12:	8f e1       	ldi	r24, 0x1F	; 31
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     e1a:	08 95       	ret
		case BLUE_LED:		M_Dio_pinWrite(BLU_LED_PIN,HIGH);							break;
     e1c:	80 e2       	ldi	r24, 0x20	; 32
     e1e:	61 e0       	ldi	r22, 0x01	; 1
     e20:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     e24:	08 95       	ret

00000e26 <H_Led_void_LedTogl>:

			}
}
void H_Led_void_LedTogl(u8 copy_u8_led)
{
	switch(copy_u8_led)
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	49 f0       	breq	.+18     	; 0xe3c <H_Led_void_LedTogl+0x16>
     e2a:	81 30       	cpi	r24, 0x01	; 1
     e2c:	18 f0       	brcs	.+6      	; 0xe34 <H_Led_void_LedTogl+0xe>
     e2e:	82 30       	cpi	r24, 0x02	; 2
     e30:	61 f4       	brne	.+24     	; 0xe4a <H_Led_void_LedTogl+0x24>
     e32:	08 c0       	rjmp	.+16     	; 0xe44 <H_Led_void_LedTogl+0x1e>
				{
				case RED_LED:		M_Dio_PinTogl(RED_LED_PIN);							break;
     e34:	8e e1       	ldi	r24, 0x1E	; 30
     e36:	0e 94 84 03 	call	0x708	; 0x708 <M_Dio_PinTogl>
     e3a:	08 95       	ret
				case GREEN_LED:		M_Dio_PinTogl(GRN_LED_PIN);							break;
     e3c:	8f e1       	ldi	r24, 0x1F	; 31
     e3e:	0e 94 84 03 	call	0x708	; 0x708 <M_Dio_PinTogl>
     e42:	08 95       	ret
				case BLUE_LED:		M_Dio_PinTogl(BLU_LED_PIN);							break;
     e44:	80 e2       	ldi	r24, 0x20	; 32
     e46:	0e 94 84 03 	call	0x708	; 0x708 <M_Dio_PinTogl>
     e4a:	08 95       	ret

00000e4c <H_Led_void_LedInit>:

/****************************************Functions****************************************/

void H_Led_void_LedInit(u8 copy_u8_led)
{
	switch(copy_u8_led)
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	51 f0       	breq	.+20     	; 0xe64 <H_Led_void_LedInit+0x18>
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	18 f0       	brcs	.+6      	; 0xe5a <H_Led_void_LedInit+0xe>
     e54:	82 30       	cpi	r24, 0x02	; 2
     e56:	79 f4       	brne	.+30     	; 0xe76 <H_Led_void_LedInit+0x2a>
     e58:	0a c0       	rjmp	.+20     	; 0xe6e <H_Led_void_LedInit+0x22>
	{
	case RED_LED:		M_Dio_pinMode(RED_LED_PIN,OUTPUT);							break;
     e5a:	8e e1       	ldi	r24, 0x1E	; 30
     e5c:	61 e0       	ldi	r22, 0x01	; 1
     e5e:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>
     e62:	08 95       	ret
	case GREEN_LED:		M_Dio_pinMode(GRN_LED_PIN,OUTPUT);							break;
     e64:	8f e1       	ldi	r24, 0x1F	; 31
     e66:	61 e0       	ldi	r22, 0x01	; 1
     e68:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>
     e6c:	08 95       	ret
	case BLUE_LED:		M_Dio_pinMode(BLU_LED_PIN,OUTPUT);							break;
     e6e:	80 e2       	ldi	r24, 0x20	; 32
     e70:	61 e0       	ldi	r22, 0x01	; 1
     e72:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>
     e76:	08 95       	ret

00000e78 <H_Lcd_void_LcdSendCharacter>:


#endif
}
void H_Lcd_void_LcdSendCharacter(u8 copy_u8_Data)
{
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	18 2f       	mov	r17, r24
	M_Dio_pinWrite(LCD_RS_PIN,HIGH);		//send data
     e82:	8b e0       	ldi	r24, 0x0B	; 11
     e84:	61 e0       	ldi	r22, 0x01	; 1
     e86:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>

#elif			LCD_MODE  == _4_BIT_MODE


	//sending the last 4 bits first
	M_Dio_pinWrite(LCD_D4_PIN,copy_u8_Data >> 4 & 0x01);
     e8a:	61 2f       	mov	r22, r17
     e8c:	62 95       	swap	r22
     e8e:	6f 70       	andi	r22, 0x0F	; 15
     e90:	61 70       	andi	r22, 0x01	; 1
     e92:	8d e0       	ldi	r24, 0x0D	; 13
     e94:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
	M_Dio_pinWrite(LCD_D5_PIN,copy_u8_Data >> 5 & 0x01);
     e98:	61 2f       	mov	r22, r17
     e9a:	62 95       	swap	r22
     e9c:	66 95       	lsr	r22
     e9e:	67 70       	andi	r22, 0x07	; 7
     ea0:	61 70       	andi	r22, 0x01	; 1
     ea2:	8e e0       	ldi	r24, 0x0E	; 14
     ea4:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
	M_Dio_pinWrite(LCD_D6_PIN,copy_u8_Data >> 6 & 0x01);
     ea8:	61 2f       	mov	r22, r17
     eaa:	62 95       	swap	r22
     eac:	66 95       	lsr	r22
     eae:	66 95       	lsr	r22
     eb0:	63 70       	andi	r22, 0x03	; 3
     eb2:	61 70       	andi	r22, 0x01	; 1
     eb4:	8f e0       	ldi	r24, 0x0F	; 15
     eb6:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
	M_Dio_pinWrite(LCD_D7_PIN,copy_u8_Data >> 7 & 0x01);
     eba:	61 2f       	mov	r22, r17
     ebc:	66 1f       	adc	r22, r22
     ebe:	66 27       	eor	r22, r22
     ec0:	66 1f       	adc	r22, r22
     ec2:	80 e1       	ldi	r24, 0x10	; 16
     ec4:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>

	M_Dio_pinWrite(LCD_EN_PIN,HIGH);	//LCD_EN_PIN_HIGH_to_MAKE_LCD_MC_READ_FROM_REGISTERS
     ec8:	8c e0       	ldi	r24, 0x0C	; 12
     eca:	61 e0       	ldi	r22, 0x01	; 1
     ecc:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     ed0:	0f 2e       	mov	r0, r31
     ed2:	f0 e2       	ldi	r31, 0x20	; 32
     ed4:	ef 2e       	mov	r14, r31
     ed6:	fe e4       	ldi	r31, 0x4E	; 78
     ed8:	ff 2e       	mov	r15, r31
     eda:	f0 2d       	mov	r31, r0
     edc:	c7 01       	movw	r24, r14
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <H_Lcd_void_LcdSendCharacter+0x66>
	_delay_ms(5);						//UNTILL_LCD_MC_READ_FROM_REGISTERS
	M_Dio_pinWrite(LCD_EN_PIN,LOW);		//LCD_EN_PIN_LOW_to_MAKE_LCD_MC_STOP_READING_FROM_REGISTERS
     ee2:	8c e0       	ldi	r24, 0x0C	; 12
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     eea:	c7 01       	movw	r24, r14
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	f1 f7       	brne	.-4      	; 0xeec <H_Lcd_void_LcdSendCharacter+0x74>
	_delay_ms(5);
	//then sending the first 4 bits
	copy_u8_Data = copy_u8_Data	<<	4;		//shift the 1st 4 bits to be the the last4
	M_Dio_pinWrite(LCD_D4_PIN,copy_u8_Data >> 4 & 0x01);
     ef0:	01 2f       	mov	r16, r17
     ef2:	02 95       	swap	r16
     ef4:	00 7f       	andi	r16, 0xF0	; 240
     ef6:	11 70       	andi	r17, 0x01	; 1
     ef8:	8d e0       	ldi	r24, 0x0D	; 13
     efa:	61 2f       	mov	r22, r17
     efc:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
	M_Dio_pinWrite(LCD_D5_PIN,copy_u8_Data >> 5 & 0x01);
     f00:	60 2f       	mov	r22, r16
     f02:	62 95       	swap	r22
     f04:	66 95       	lsr	r22
     f06:	67 70       	andi	r22, 0x07	; 7
     f08:	61 70       	andi	r22, 0x01	; 1
     f0a:	8e e0       	ldi	r24, 0x0E	; 14
     f0c:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
	M_Dio_pinWrite(LCD_D6_PIN,copy_u8_Data >> 6 & 0x01);
     f10:	60 2f       	mov	r22, r16
     f12:	62 95       	swap	r22
     f14:	66 95       	lsr	r22
     f16:	66 95       	lsr	r22
     f18:	63 70       	andi	r22, 0x03	; 3
     f1a:	61 70       	andi	r22, 0x01	; 1
     f1c:	8f e0       	ldi	r24, 0x0F	; 15
     f1e:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
	M_Dio_pinWrite(LCD_D7_PIN,copy_u8_Data >> 7 & 0x01);
     f22:	00 1f       	adc	r16, r16
     f24:	00 27       	eor	r16, r16
     f26:	00 1f       	adc	r16, r16
     f28:	80 e1       	ldi	r24, 0x10	; 16
     f2a:	60 2f       	mov	r22, r16
     f2c:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>

	M_Dio_pinWrite(LCD_EN_PIN,HIGH);	//LCD_EN_PIN_HIGH_to_MAKE_LCD_MC_READ_FROM_REGISTERS
     f30:	8c e0       	ldi	r24, 0x0C	; 12
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
     f38:	c7 01       	movw	r24, r14
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <H_Lcd_void_LcdSendCharacter+0xc2>
	_delay_ms(5);						//UNTILL_LCD_MC_READ_FROM_REGISTERS
	M_Dio_pinWrite(LCD_EN_PIN,LOW);		//LCD_EN_PIN_LOW_to_MAKE_LCD_MC_STOP_READING_FROM_REGISTERS
     f3e:	8c e0       	ldi	r24, 0x0C	; 12
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>


#endif
}
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	08 95       	ret

00000f50 <H_Lcd_void_LcdSendNumber>:
		H_Lcd_void_LcdSendCharacter(copy_u8_ptr[local_u8_counter]);
		local_u8_counter++;
	}
}
void H_Lcd_void_LcdSendNumber(s32 copy_s32_Number)
{
     f50:	af 92       	push	r10
     f52:	bf 92       	push	r11
     f54:	cf 92       	push	r12
     f56:	df 92       	push	r13
     f58:	ef 92       	push	r14
     f5a:	ff 92       	push	r15
     f5c:	0f 93       	push	r16
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	66 97       	sbiw	r28, 0x16	; 22
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	6b 01       	movw	r12, r22
     f74:	7c 01       	movw	r14, r24
	u8 local_u8_Arr[20];
	s8 local_s8_counter=0;
	if(copy_s32_Number < 0)
     f76:	99 23       	and	r25, r25
     f78:	5c f4       	brge	.+22     	; 0xf90 <H_Lcd_void_LcdSendNumber+0x40>
	{
		copy_s32_Number = copy_s32_Number * (-1);
     f7a:	f0 94       	com	r15
     f7c:	e0 94       	com	r14
     f7e:	d0 94       	com	r13
     f80:	c0 94       	com	r12
     f82:	c1 1c       	adc	r12, r1
     f84:	d1 1c       	adc	r13, r1
     f86:	e1 1c       	adc	r14, r1
     f88:	f1 1c       	adc	r15, r1
		H_Lcd_void_LcdSendCharacter('-');
     f8a:	8d e2       	ldi	r24, 0x2D	; 45
     f8c:	0e 94 3c 07 	call	0xe78	; 0xe78 <H_Lcd_void_LcdSendCharacter>
     f90:	00 e0       	ldi	r16, 0x00	; 0
	}
	do
	{
		local_u8_Arr[local_s8_counter] = copy_s32_Number % 10;
     f92:	5e 01       	movw	r10, r28
     f94:	08 94       	sec
     f96:	a1 1c       	adc	r10, r1
     f98:	b1 1c       	adc	r11, r1
     f9a:	80 2f       	mov	r24, r16
     f9c:	99 27       	eor	r25, r25
     f9e:	87 fd       	sbrc	r24, 7
     fa0:	90 95       	com	r25
     fa2:	95 01       	movw	r18, r10
     fa4:	28 0f       	add	r18, r24
     fa6:	39 1f       	adc	r19, r25
     fa8:	3e 8b       	std	Y+22, r19	; 0x16
     faa:	2d 8b       	std	Y+21, r18	; 0x15
     fac:	c7 01       	movw	r24, r14
     fae:	b6 01       	movw	r22, r12
     fb0:	2a e0       	ldi	r18, 0x0A	; 10
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e0       	ldi	r20, 0x00	; 0
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__divmodsi4>
     fbc:	ed 89       	ldd	r30, Y+21	; 0x15
     fbe:	fe 89       	ldd	r31, Y+22	; 0x16
     fc0:	60 83       	st	Z, r22
		copy_s32_Number = copy_s32_Number/10;
     fc2:	c7 01       	movw	r24, r14
     fc4:	b6 01       	movw	r22, r12
     fc6:	2a e0       	ldi	r18, 0x0A	; 10
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__divmodsi4>
     fd2:	82 2f       	mov	r24, r18
     fd4:	93 2f       	mov	r25, r19
     fd6:	a4 2f       	mov	r26, r20
     fd8:	b5 2f       	mov	r27, r21
     fda:	6c 01       	movw	r12, r24
     fdc:	7d 01       	movw	r14, r26
		local_s8_counter++;
     fde:	80 2f       	mov	r24, r16
     fe0:	8f 5f       	subi	r24, 0xFF	; 255

	}while(copy_s32_Number!=0);
     fe2:	c1 14       	cp	r12, r1
     fe4:	d1 04       	cpc	r13, r1
     fe6:	e1 04       	cpc	r14, r1
     fe8:	f1 04       	cpc	r15, r1
     fea:	11 f0       	breq	.+4      	; 0xff0 <H_Lcd_void_LcdSendNumber+0xa0>
     fec:	08 2f       	mov	r16, r24
     fee:	d5 cf       	rjmp	.-86     	; 0xf9a <H_Lcd_void_LcdSendNumber+0x4a>
	local_s8_counter--;
	while(local_s8_counter>=0)
     ff0:	00 23       	and	r16, r16
     ff2:	8c f0       	brlt	.+34     	; 0x1016 <H_Lcd_void_LcdSendNumber+0xc6>
	{
		H_Lcd_void_LcdSendCharacter(local_u8_Arr[local_s8_counter]+48);
     ff4:	7e 01       	movw	r14, r28
     ff6:	08 94       	sec
     ff8:	e1 1c       	adc	r14, r1
     ffa:	f1 1c       	adc	r15, r1
     ffc:	80 2f       	mov	r24, r16
     ffe:	99 27       	eor	r25, r25
    1000:	87 fd       	sbrc	r24, 7
    1002:	90 95       	com	r25
    1004:	f7 01       	movw	r30, r14
    1006:	e8 0f       	add	r30, r24
    1008:	f9 1f       	adc	r31, r25
    100a:	80 81       	ld	r24, Z
    100c:	80 5d       	subi	r24, 0xD0	; 208
    100e:	0e 94 3c 07 	call	0xe78	; 0xe78 <H_Lcd_void_LcdSendCharacter>
		local_s8_counter--;
    1012:	01 50       	subi	r16, 0x01	; 1
		copy_s32_Number = copy_s32_Number/10;
		local_s8_counter++;

	}while(copy_s32_Number!=0);
	local_s8_counter--;
	while(local_s8_counter>=0)
    1014:	9a f7       	brpl	.-26     	; 0xffc <H_Lcd_void_LcdSendNumber+0xac>
	{
		H_Lcd_void_LcdSendCharacter(local_u8_Arr[local_s8_counter]+48);
		local_s8_counter--;
	}

}
    1016:	66 96       	adiw	r28, 0x16	; 22
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	0f 91       	pop	r16
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	df 90       	pop	r13
    102e:	cf 90       	pop	r12
    1030:	bf 90       	pop	r11
    1032:	af 90       	pop	r10
    1034:	08 95       	ret

00001036 <H_Lcd_void_LcdSendString>:


#endif
}
void H_Lcd_void_LcdSendString(char *copy_u8_ptr)
{
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	ec 01       	movw	r28, r24
	u8 local_u8_counter=0;
	while(copy_u8_ptr[local_u8_counter] != '\0')
    103e:	88 81       	ld	r24, Y
    1040:	88 23       	and	r24, r24
    1042:	51 f0       	breq	.+20     	; 0x1058 <H_Lcd_void_LcdSendString+0x22>
    1044:	10 e0       	ldi	r17, 0x00	; 0
	{
		H_Lcd_void_LcdSendCharacter(copy_u8_ptr[local_u8_counter]);
    1046:	0e 94 3c 07 	call	0xe78	; 0xe78 <H_Lcd_void_LcdSendCharacter>
		local_u8_counter++;
    104a:	1f 5f       	subi	r17, 0xFF	; 255
#endif
}
void H_Lcd_void_LcdSendString(char *copy_u8_ptr)
{
	u8 local_u8_counter=0;
	while(copy_u8_ptr[local_u8_counter] != '\0')
    104c:	fe 01       	movw	r30, r28
    104e:	e1 0f       	add	r30, r17
    1050:	f1 1d       	adc	r31, r1
    1052:	80 81       	ld	r24, Z
    1054:	88 23       	and	r24, r24
    1056:	b9 f7       	brne	.-18     	; 0x1046 <H_Lcd_void_LcdSendString+0x10>
	{
		H_Lcd_void_LcdSendCharacter(copy_u8_ptr[local_u8_counter]);
		local_u8_counter++;
	}
}
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	08 95       	ret

00001060 <H_Lcd_void_LcdSendCommand>:
#endif


}
void H_Lcd_void_LcdSendCommand(u8 copy_u8_command)
{
    1060:	ef 92       	push	r14
    1062:	ff 92       	push	r15
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	18 2f       	mov	r17, r24
	M_Dio_pinWrite(LCD_RS_PIN,LOW);		//send command
    106a:	8b e0       	ldi	r24, 0x0B	; 11
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>

#elif			LCD_MODE  == _4_BIT_MODE



	M_Dio_pinWrite(LCD_D4_PIN,copy_u8_command >> 4 & 0x01);
    1072:	61 2f       	mov	r22, r17
    1074:	62 95       	swap	r22
    1076:	6f 70       	andi	r22, 0x0F	; 15
    1078:	61 70       	andi	r22, 0x01	; 1
    107a:	8d e0       	ldi	r24, 0x0D	; 13
    107c:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
	M_Dio_pinWrite(LCD_D5_PIN,copy_u8_command >> 5 & 0x01);
    1080:	61 2f       	mov	r22, r17
    1082:	62 95       	swap	r22
    1084:	66 95       	lsr	r22
    1086:	67 70       	andi	r22, 0x07	; 7
    1088:	61 70       	andi	r22, 0x01	; 1
    108a:	8e e0       	ldi	r24, 0x0E	; 14
    108c:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
	M_Dio_pinWrite(LCD_D6_PIN,copy_u8_command >> 6 & 0x01);
    1090:	61 2f       	mov	r22, r17
    1092:	62 95       	swap	r22
    1094:	66 95       	lsr	r22
    1096:	66 95       	lsr	r22
    1098:	63 70       	andi	r22, 0x03	; 3
    109a:	61 70       	andi	r22, 0x01	; 1
    109c:	8f e0       	ldi	r24, 0x0F	; 15
    109e:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
	M_Dio_pinWrite(LCD_D7_PIN,copy_u8_command >> 7 & 0x01);
    10a2:	61 2f       	mov	r22, r17
    10a4:	66 1f       	adc	r22, r22
    10a6:	66 27       	eor	r22, r22
    10a8:	66 1f       	adc	r22, r22
    10aa:	80 e1       	ldi	r24, 0x10	; 16
    10ac:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>

	M_Dio_pinWrite(LCD_EN_PIN,HIGH);	//LCD_EN_PIN_HIGH_to_MAKE_LCD_MC_READ_FROM_REGISTERS
    10b0:	8c e0       	ldi	r24, 0x0C	; 12
    10b2:	61 e0       	ldi	r22, 0x01	; 1
    10b4:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
    10b8:	0f 2e       	mov	r0, r31
    10ba:	f0 e2       	ldi	r31, 0x20	; 32
    10bc:	ef 2e       	mov	r14, r31
    10be:	fe e4       	ldi	r31, 0x4E	; 78
    10c0:	ff 2e       	mov	r15, r31
    10c2:	f0 2d       	mov	r31, r0
    10c4:	c7 01       	movw	r24, r14
    10c6:	01 97       	sbiw	r24, 0x01	; 1
    10c8:	f1 f7       	brne	.-4      	; 0x10c6 <H_Lcd_void_LcdSendCommand+0x66>
	_delay_ms(5);						//UNTILL_LCD_MC_READ_FROM_REGISTERS
	M_Dio_pinWrite(LCD_EN_PIN,LOW);		//LCD_EN_PIN_LOW_to_MAKE_LCD_MC_STOP_READING_FROM_REGISTERS
    10ca:	8c e0       	ldi	r24, 0x0C	; 12
    10cc:	60 e0       	ldi	r22, 0x00	; 0
    10ce:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
    10d2:	c7 01       	movw	r24, r14
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <H_Lcd_void_LcdSendCommand+0x74>
	_delay_ms(5);
	copy_u8_command = copy_u8_command	<<	4;		//shift the 1st 4 bits to be the the last4
	M_Dio_pinWrite(LCD_D4_PIN,copy_u8_command >> 4 & 0x01);
    10d8:	01 2f       	mov	r16, r17
    10da:	02 95       	swap	r16
    10dc:	00 7f       	andi	r16, 0xF0	; 240
    10de:	11 70       	andi	r17, 0x01	; 1
    10e0:	8d e0       	ldi	r24, 0x0D	; 13
    10e2:	61 2f       	mov	r22, r17
    10e4:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
	M_Dio_pinWrite(LCD_D5_PIN,copy_u8_command >> 5 & 0x01);
    10e8:	60 2f       	mov	r22, r16
    10ea:	62 95       	swap	r22
    10ec:	66 95       	lsr	r22
    10ee:	67 70       	andi	r22, 0x07	; 7
    10f0:	61 70       	andi	r22, 0x01	; 1
    10f2:	8e e0       	ldi	r24, 0x0E	; 14
    10f4:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
	M_Dio_pinWrite(LCD_D6_PIN,copy_u8_command >> 6 & 0x01);
    10f8:	60 2f       	mov	r22, r16
    10fa:	62 95       	swap	r22
    10fc:	66 95       	lsr	r22
    10fe:	66 95       	lsr	r22
    1100:	63 70       	andi	r22, 0x03	; 3
    1102:	61 70       	andi	r22, 0x01	; 1
    1104:	8f e0       	ldi	r24, 0x0F	; 15
    1106:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
	M_Dio_pinWrite(LCD_D7_PIN,copy_u8_command >> 7 & 0x01);
    110a:	00 1f       	adc	r16, r16
    110c:	00 27       	eor	r16, r16
    110e:	00 1f       	adc	r16, r16
    1110:	80 e1       	ldi	r24, 0x10	; 16
    1112:	60 2f       	mov	r22, r16
    1114:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>

	M_Dio_pinWrite(LCD_EN_PIN,HIGH);	//LCD_EN_PIN_HIGH_to_MAKE_LCD_MC_READ_FROM_REGISTERS
    1118:	8c e0       	ldi	r24, 0x0C	; 12
    111a:	61 e0       	ldi	r22, 0x01	; 1
    111c:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
    1120:	c7 01       	movw	r24, r14
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	f1 f7       	brne	.-4      	; 0x1122 <H_Lcd_void_LcdSendCommand+0xc2>
	_delay_ms(5);						//UNTILL_LCD_MC_READ_FROM_REGISTERS
	M_Dio_pinWrite(LCD_EN_PIN,LOW);		//LCD_EN_PIN_LOW_to_MAKE_LCD_MC_STOP_READING_FROM_REGISTERS
    1126:	8c e0       	ldi	r24, 0x0C	; 12
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>


#endif
}
    112e:	1f 91       	pop	r17
    1130:	0f 91       	pop	r16
    1132:	ff 90       	pop	r15
    1134:	ef 90       	pop	r14
    1136:	08 95       	ret

00001138 <H_Lcd_void_LcdGoTo>:
	H_Lcd_void_LcdSendCommand(LCD_CLEAR_COMMAND);

}

void H_Lcd_void_LcdGoTo(u8 copy_u8_Row,u8 copy_u8_Col)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <H_Lcd_void_LcdGoTo+0x6>
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
		u8 Local_u8_Arr[2]={ROW_0,ROW_1};
    1142:	90 e8       	ldi	r25, 0x80	; 128
    1144:	99 83       	std	Y+1, r25	; 0x01
    1146:	90 ec       	ldi	r25, 0xC0	; 192
    1148:	9a 83       	std	Y+2, r25	; 0x02
		H_Lcd_void_LcdSendCommand(Local_u8_Arr[copy_u8_Row] + copy_u8_Col);
    114a:	fe 01       	movw	r30, r28
    114c:	e8 0f       	add	r30, r24
    114e:	f1 1d       	adc	r31, r1
    1150:	81 81       	ldd	r24, Z+1	; 0x01
    1152:	86 0f       	add	r24, r22
    1154:	0e 94 30 08 	call	0x1060	; 0x1060 <H_Lcd_void_LcdSendCommand>


}
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <H_Lcd_void_LcdClear>:

}

void H_Lcd_void_LcdClear(void)
{
	H_Lcd_void_LcdSendCommand(LCD_CLEAR_COMMAND);
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	0e 94 30 08 	call	0x1060	; 0x1060 <H_Lcd_void_LcdSendCommand>

}
    1168:	08 95       	ret

0000116a <H_Lcd_void_LcdInit>:
	H_Lcd_void_LcdSendCommand(LCD_CLEAR_COMMAND);

#elif			LCD_MODE  == _4_BIT_MODE


	M_Dio_pinMode(LCD_D4_PIN,OUTPUT);
    116a:	8d e0       	ldi	r24, 0x0D	; 13
    116c:	61 e0       	ldi	r22, 0x01	; 1
    116e:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>
	M_Dio_pinMode(LCD_D5_PIN,OUTPUT);
    1172:	8e e0       	ldi	r24, 0x0E	; 14
    1174:	61 e0       	ldi	r22, 0x01	; 1
    1176:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>
	M_Dio_pinMode(LCD_D6_PIN,OUTPUT);
    117a:	8f e0       	ldi	r24, 0x0F	; 15
    117c:	61 e0       	ldi	r22, 0x01	; 1
    117e:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>
	M_Dio_pinMode(LCD_D7_PIN,OUTPUT);
    1182:	80 e1       	ldi	r24, 0x10	; 16
    1184:	61 e0       	ldi	r22, 0x01	; 1
    1186:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>

	M_Dio_pinMode(LCD_RS_PIN,OUTPUT);
    118a:	8b e0       	ldi	r24, 0x0B	; 11
    118c:	61 e0       	ldi	r22, 0x01	; 1
    118e:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>
	M_Dio_pinMode(LCD_EN_PIN,OUTPUT);
    1192:	8c e0       	ldi	r24, 0x0C	; 12
    1194:	61 e0       	ldi	r22, 0x01	; 1
    1196:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>


	H_Lcd_void_LcdSendCommand(LCD_4_BIT_MODE_COMMAND_1);
    119a:	83 e3       	ldi	r24, 0x33	; 51
    119c:	0e 94 30 08 	call	0x1060	; 0x1060 <H_Lcd_void_LcdSendCommand>
	H_Lcd_void_LcdSendCommand(LCD_4_BIT_MODE_COMMAND_2);
    11a0:	82 e3       	ldi	r24, 0x32	; 50
    11a2:	0e 94 30 08 	call	0x1060	; 0x1060 <H_Lcd_void_LcdSendCommand>
	H_Lcd_void_LcdSendCommand(LCD_4_BIT_MODE_COMMAND_3);
    11a6:	88 e2       	ldi	r24, 0x28	; 40
    11a8:	0e 94 30 08 	call	0x1060	; 0x1060 <H_Lcd_void_LcdSendCommand>

	H_Lcd_void_LcdSendCommand(LCD_DISPLAY_ON_COMMAND);
    11ac:	8c e0       	ldi	r24, 0x0C	; 12
    11ae:	0e 94 30 08 	call	0x1060	; 0x1060 <H_Lcd_void_LcdSendCommand>

	H_Lcd_void_LcdSendCommand(LCD_CLEAR_COMMAND);
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	0e 94 30 08 	call	0x1060	; 0x1060 <H_Lcd_void_LcdSendCommand>


#endif


}
    11b8:	08 95       	ret

000011ba <H_KeyPad_void_KeyPadRead>:
	M_Dio_pinMode(KEYPAD_COL_2_PIN,INPUT);
	M_Dio_pinMode(KEYPAD_COL_3_PIN,INPUT);

}
u8 H_KeyPad_void_KeyPadRead(void)
{
    11ba:	4f 92       	push	r4
    11bc:	5f 92       	push	r5
    11be:	6f 92       	push	r6
    11c0:	7f 92       	push	r7
    11c2:	8f 92       	push	r8
    11c4:	9f 92       	push	r9
    11c6:	af 92       	push	r10
    11c8:	bf 92       	push	r11
    11ca:	cf 92       	push	r12
    11cc:	df 92       	push	r13
    11ce:	ef 92       	push	r14
    11d0:	ff 92       	push	r15
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	60 97       	sbiw	r28, 0x10	; 16
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8_Arr[4][4]={
			{ '1' , '2' , '3' , 'A' },
			{ '4' , '5' , '6' , 'B' },
			{ '7' , '8' , '9' , 'C' },
			{ '*' , '0' , '#' , 'D' }
						  };
    11ea:	de 01       	movw	r26, r28
    11ec:	11 96       	adiw	r26, 0x01	; 1
    11ee:	e0 e6       	ldi	r30, 0x60	; 96
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 e1       	ldi	r24, 0x10	; 16
    11f4:	01 90       	ld	r0, Z+
    11f6:	0d 92       	st	X+, r0
    11f8:	81 50       	subi	r24, 0x01	; 1
    11fa:	e1 f7       	brne	.-8      	; 0x11f4 <H_KeyPad_void_KeyPadRead+0x3a>
    11fc:	77 24       	eor	r7, r7
    11fe:	aa 24       	eor	r10, r10
    1200:	bb 24       	eor	r11, r11

	for(local_u8_Row =KEYPAD_ROW_0_PIN;local_u8_Row <=KEYPAD_ROW_3_PIN;local_u8_Row ++)
	{
		M_Dio_pinWrite(local_u8_Row,LOW);
    1202:	2e 01       	movw	r4, r28
    1204:	08 94       	sec
    1206:	41 1c       	adc	r4, r1
    1208:	51 1c       	adc	r5, r1
    120a:	0f 2e       	mov	r0, r31
    120c:	fa e2       	ldi	r31, 0x2A	; 42
    120e:	6f 2e       	mov	r6, r31
    1210:	f0 2d       	mov	r31, r0
    1212:	00 e9       	ldi	r16, 0x90	; 144
    1214:	11 e0       	ldi	r17, 0x01	; 1

		for(local_u8_Col = KEYPAD_COL_0_PIN;local_u8_Col<=KEYPAD_COL_3_PIN;local_u8_Col++)	// in case the col pins are connected is sequence
		{

			if(M_Dio_pinRead(local_u8_Col) == 0)	// debouncing of switch
    1216:	88 ee       	ldi	r24, 0xE8	; 232
    1218:	93 e0       	ldi	r25, 0x03	; 3
    121a:	98 2e       	mov	r9, r24
    121c:	89 2e       	mov	r8, r25
	u8 local_u8_Arr[4][4]={
			{ '1' , '2' , '3' , 'A' },
			{ '4' , '5' , '6' , 'B' },
			{ '7' , '8' , '9' , 'C' },
			{ '*' , '0' , '#' , 'D' }
						  };
    121e:	0f 2e       	mov	r0, r31
    1220:	f8 e1       	ldi	r31, 0x18	; 24
    1222:	ef 2e       	mov	r14, r31
    1224:	f0 2d       	mov	r31, r0
    1226:	ea 0c       	add	r14, r10

	for(local_u8_Row =KEYPAD_ROW_0_PIN;local_u8_Row <=KEYPAD_ROW_3_PIN;local_u8_Row ++)
	{
		M_Dio_pinWrite(local_u8_Row,LOW);
    1228:	8e 2d       	mov	r24, r14
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
    1230:	c5 01       	movw	r24, r10
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	62 01       	movw	r12, r4
    123c:	c8 0e       	add	r12, r24
    123e:	d9 1e       	adc	r13, r25
    1240:	f6 2c       	mov	r15, r6

		for(local_u8_Col = KEYPAD_COL_0_PIN;local_u8_Col<=KEYPAD_COL_3_PIN;local_u8_Col++)	// in case the col pins are connected is sequence
		{

			if(M_Dio_pinRead(local_u8_Col) == 0)	// debouncing of switch
    1242:	8f 2d       	mov	r24, r15
    1244:	0e 94 4b 03 	call	0x696	; 0x696 <M_Dio_pinRead>
    1248:	88 23       	and	r24, r24
    124a:	99 f4       	brne	.+38     	; 0x1272 <H_KeyPad_void_KeyPadRead+0xb8>
    124c:	89 2d       	mov	r24, r9
    124e:	98 2d       	mov	r25, r8
    1250:	f8 01       	movw	r30, r16
    1252:	31 97       	sbiw	r30, 0x01	; 1
    1254:	f1 f7       	brne	.-4      	; 0x1252 <H_KeyPad_void_KeyPadRead+0x98>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1256:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1258:	d9 f7       	brne	.-10     	; 0x1250 <H_KeyPad_void_KeyPadRead+0x96>
			{
				_delay_ms(100);
				if(M_Dio_pinRead(local_u8_Col) == 0)
    125a:	8f 2d       	mov	r24, r15
    125c:	0e 94 4b 03 	call	0x696	; 0x696 <M_Dio_pinRead>
    1260:	88 23       	and	r24, r24
    1262:	39 f4       	brne	.+14     	; 0x1272 <H_KeyPad_void_KeyPadRead+0xb8>
				{
					local_u8_Reading = local_u8_Arr[local_u8_Row - KEYPAD_ROW_0_PIN][local_u8_Col - KEYPAD_COL_0_PIN];
    1264:	f6 01       	movw	r30, r12
    1266:	70 80       	ld	r7, Z
					while(M_Dio_pinRead(local_u8_Col) == 0);	// while pressed
    1268:	8f 2d       	mov	r24, r15
    126a:	0e 94 4b 03 	call	0x696	; 0x696 <M_Dio_pinRead>
    126e:	88 23       	and	r24, r24
    1270:	d9 f3       	breq	.-10     	; 0x1268 <H_KeyPad_void_KeyPadRead+0xae>

	for(local_u8_Row =KEYPAD_ROW_0_PIN;local_u8_Row <=KEYPAD_ROW_3_PIN;local_u8_Row ++)
	{
		M_Dio_pinWrite(local_u8_Row,LOW);

		for(local_u8_Col = KEYPAD_COL_0_PIN;local_u8_Col<=KEYPAD_COL_3_PIN;local_u8_Col++)	// in case the col pins are connected is sequence
    1272:	f3 94       	inc	r15
    1274:	08 94       	sec
    1276:	c1 1c       	adc	r12, r1
    1278:	d1 1c       	adc	r13, r1
    127a:	fe e2       	ldi	r31, 0x2E	; 46
    127c:	ff 16       	cp	r15, r31
    127e:	09 f7       	brne	.-62     	; 0x1242 <H_KeyPad_void_KeyPadRead+0x88>
				}
			}

		}

		M_Dio_pinWrite(local_u8_Row,HIGH);
    1280:	8e 2d       	mov	r24, r14
    1282:	61 e0       	ldi	r22, 0x01	; 1
    1284:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
    1288:	08 94       	sec
    128a:	a1 1c       	adc	r10, r1
    128c:	b1 1c       	adc	r11, r1
			{ '4' , '5' , '6' , 'B' },
			{ '7' , '8' , '9' , 'C' },
			{ '*' , '0' , '#' , 'D' }
						  };

	for(local_u8_Row =KEYPAD_ROW_0_PIN;local_u8_Row <=KEYPAD_ROW_3_PIN;local_u8_Row ++)
    128e:	84 e0       	ldi	r24, 0x04	; 4
    1290:	a8 16       	cp	r10, r24
    1292:	b1 04       	cpc	r11, r1
    1294:	21 f6       	brne	.-120    	; 0x121e <H_KeyPad_void_KeyPadRead+0x64>

		M_Dio_pinWrite(local_u8_Row,HIGH);

	}
	return local_u8_Reading;
}
    1296:	87 2d       	mov	r24, r7
    1298:	60 96       	adiw	r28, 0x10	; 16
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	1f 91       	pop	r17
    12aa:	0f 91       	pop	r16
    12ac:	ff 90       	pop	r15
    12ae:	ef 90       	pop	r14
    12b0:	df 90       	pop	r13
    12b2:	cf 90       	pop	r12
    12b4:	bf 90       	pop	r11
    12b6:	af 90       	pop	r10
    12b8:	9f 90       	pop	r9
    12ba:	8f 90       	pop	r8
    12bc:	7f 90       	pop	r7
    12be:	6f 90       	pop	r6
    12c0:	5f 90       	pop	r5
    12c2:	4f 90       	pop	r4
    12c4:	08 95       	ret

000012c6 <H_KeyPad_void_KeyPadInit>:
#include<util/delay.h>

void H_KeyPad_void_KeyPadInit(void)
{

	M_Dio_pinMode(KEYPAD_ROW_0_PIN,OUTPUT);
    12c6:	88 e1       	ldi	r24, 0x18	; 24
    12c8:	61 e0       	ldi	r22, 0x01	; 1
    12ca:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>
	M_Dio_pinMode(KEYPAD_ROW_1_PIN,OUTPUT);
    12ce:	89 e1       	ldi	r24, 0x19	; 25
    12d0:	61 e0       	ldi	r22, 0x01	; 1
    12d2:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>
	M_Dio_pinMode(KEYPAD_ROW_2_PIN,OUTPUT);
    12d6:	8a e1       	ldi	r24, 0x1A	; 26
    12d8:	61 e0       	ldi	r22, 0x01	; 1
    12da:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>
	M_Dio_pinMode(KEYPAD_ROW_3_PIN,OUTPUT);
    12de:	8b e1       	ldi	r24, 0x1B	; 27
    12e0:	61 e0       	ldi	r22, 0x01	; 1
    12e2:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>

	M_Dio_pinWrite(KEYPAD_ROW_0_PIN,HIGH);
    12e6:	88 e1       	ldi	r24, 0x18	; 24
    12e8:	61 e0       	ldi	r22, 0x01	; 1
    12ea:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
	M_Dio_pinWrite(KEYPAD_ROW_1_PIN,HIGH);
    12ee:	89 e1       	ldi	r24, 0x19	; 25
    12f0:	61 e0       	ldi	r22, 0x01	; 1
    12f2:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
	M_Dio_pinWrite(KEYPAD_ROW_2_PIN,HIGH);
    12f6:	8a e1       	ldi	r24, 0x1A	; 26
    12f8:	61 e0       	ldi	r22, 0x01	; 1
    12fa:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
	M_Dio_pinWrite(KEYPAD_ROW_3_PIN,HIGH);
    12fe:	8b e1       	ldi	r24, 0x1B	; 27
    1300:	61 e0       	ldi	r22, 0x01	; 1
    1302:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>



	M_Dio_pinMode(KEYPAD_COL_0_PIN,INPUT);
    1306:	8a e2       	ldi	r24, 0x2A	; 42
    1308:	60 e0       	ldi	r22, 0x00	; 0
    130a:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>
	M_Dio_pinMode(KEYPAD_COL_1_PIN,INPUT);
    130e:	8b e2       	ldi	r24, 0x2B	; 43
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>
	M_Dio_pinMode(KEYPAD_COL_2_PIN,INPUT);
    1316:	8c e2       	ldi	r24, 0x2C	; 44
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>
	M_Dio_pinMode(KEYPAD_COL_3_PIN,INPUT);
    131e:	8d e2       	ldi	r24, 0x2D	; 45
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>

}
    1326:	08 95       	ret

00001328 <H_Buzzer_void_BuzTwice>:
	_delay_ms(BUZZER_TIME_ON);
	M_Dio_pinWrite(BUZZER_PIN,LOW);
}
void H_Buzzer_void_BuzTwice(void)
{
	M_Dio_pinWrite(BUZZER_PIN,HIGH);
    1328:	83 e2       	ldi	r24, 0x23	; 35
    132a:	61 e0       	ldi	r22, 0x01	; 1
    132c:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
    1330:	28 ee       	ldi	r18, 0xE8	; 232
    1332:	33 e0       	ldi	r19, 0x03	; 3
    1334:	40 e9       	ldi	r20, 0x90	; 144
    1336:	51 e0       	ldi	r21, 0x01	; 1
    1338:	ca 01       	movw	r24, r20
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	f1 f7       	brne	.-4      	; 0x133a <H_Buzzer_void_BuzTwice+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133e:	21 50       	subi	r18, 0x01	; 1
    1340:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1342:	d1 f7       	brne	.-12     	; 0x1338 <H_Buzzer_void_BuzTwice+0x10>
	_delay_ms(BUZZER_TIME_ON);
	M_Dio_pinWrite(BUZZER_PIN,LOW);
    1344:	83 e2       	ldi	r24, 0x23	; 35
    1346:	60 e0       	ldi	r22, 0x00	; 0
    1348:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
    134c:	28 ee       	ldi	r18, 0xE8	; 232
    134e:	33 e0       	ldi	r19, 0x03	; 3
    1350:	40 e9       	ldi	r20, 0x90	; 144
    1352:	51 e0       	ldi	r21, 0x01	; 1
    1354:	ca 01       	movw	r24, r20
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <H_Buzzer_void_BuzTwice+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135a:	21 50       	subi	r18, 0x01	; 1
    135c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135e:	d1 f7       	brne	.-12     	; 0x1354 <H_Buzzer_void_BuzTwice+0x2c>
	_delay_ms(BUZZER_TIME_OFF);
	M_Dio_pinWrite(BUZZER_PIN,HIGH);
    1360:	83 e2       	ldi	r24, 0x23	; 35
    1362:	61 e0       	ldi	r22, 0x01	; 1
    1364:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
    1368:	28 ee       	ldi	r18, 0xE8	; 232
    136a:	33 e0       	ldi	r19, 0x03	; 3
    136c:	40 e9       	ldi	r20, 0x90	; 144
    136e:	51 e0       	ldi	r21, 0x01	; 1
    1370:	ca 01       	movw	r24, r20
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	f1 f7       	brne	.-4      	; 0x1372 <H_Buzzer_void_BuzTwice+0x4a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1376:	21 50       	subi	r18, 0x01	; 1
    1378:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137a:	d1 f7       	brne	.-12     	; 0x1370 <H_Buzzer_void_BuzTwice+0x48>
	_delay_ms(BUZZER_TIME_ON);
	M_Dio_pinWrite(BUZZER_PIN,LOW);
    137c:	83 e2       	ldi	r24, 0x23	; 35
    137e:	60 e0       	ldi	r22, 0x00	; 0
    1380:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
}
    1384:	08 95       	ret

00001386 <H_Buzzer_void_BuzOnce>:
{
	M_Dio_PinTogl(BUZZER_PIN);
}
void H_Buzzer_void_BuzOnce(void)
{
	M_Dio_pinWrite(BUZZER_PIN,HIGH);
    1386:	83 e2       	ldi	r24, 0x23	; 35
    1388:	61 e0       	ldi	r22, 0x01	; 1
    138a:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
    138e:	28 ee       	ldi	r18, 0xE8	; 232
    1390:	33 e0       	ldi	r19, 0x03	; 3
    1392:	40 e9       	ldi	r20, 0x90	; 144
    1394:	51 e0       	ldi	r21, 0x01	; 1
    1396:	ca 01       	movw	r24, r20
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	f1 f7       	brne	.-4      	; 0x1398 <H_Buzzer_void_BuzOnce+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139c:	21 50       	subi	r18, 0x01	; 1
    139e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a0:	d1 f7       	brne	.-12     	; 0x1396 <H_Buzzer_void_BuzOnce+0x10>
	_delay_ms(BUZZER_TIME_ON);
	M_Dio_pinWrite(BUZZER_PIN,LOW);
    13a2:	83 e2       	ldi	r24, 0x23	; 35
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
}
    13aa:	08 95       	ret

000013ac <H_Buzzer_void_BuzOff>:
{
	M_Dio_pinWrite(BUZZER_PIN,HIGH);
}
void H_Buzzer_void_BuzOff(void)
{
	M_Dio_pinWrite(BUZZER_PIN,LOW);
    13ac:	83 e2       	ldi	r24, 0x23	; 35
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
}
    13b4:	08 95       	ret

000013b6 <H_Buzzer_void_BuzOn>:
{
	M_Dio_pinMode(BUZZER_PIN,OUTPUT);
}
void H_Buzzer_void_BuzOn(void)
{
	M_Dio_pinWrite(BUZZER_PIN,HIGH);
    13b6:	83 e2       	ldi	r24, 0x23	; 35
    13b8:	61 e0       	ldi	r22, 0x01	; 1
    13ba:	0e 94 b6 02 	call	0x56c	; 0x56c <M_Dio_pinWrite>
}
    13be:	08 95       	ret

000013c0 <H_Buzzer_void_BuzTogl>:
{
	M_Dio_pinWrite(BUZZER_PIN,LOW);
}
void H_Buzzer_void_BuzTogl(void)
{
	M_Dio_PinTogl(BUZZER_PIN);
    13c0:	83 e2       	ldi	r24, 0x23	; 35
    13c2:	0e 94 84 03 	call	0x708	; 0x708 <M_Dio_PinTogl>
}
    13c6:	08 95       	ret

000013c8 <H_Buzzer_void_BuzInit>:
/****************************************Functions****************************************/


void H_Buzzer_void_BuzInit(void)
{
	M_Dio_pinMode(BUZZER_PIN,OUTPUT);
    13c8:	83 e2       	ldi	r24, 0x23	; 35
    13ca:	61 e0       	ldi	r22, 0x01	; 1
    13cc:	0e 94 21 02 	call	0x442	; 0x442 <M_Dio_pinMode>
}
    13d0:	08 95       	ret

000013d2 <A_Ext_Int_Excution>:


// Timer 0 END
void A_Ext_Int_Excution(void)
{
	H_Led_void_LedTogl(GREEN_LED);
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	0e 94 13 07 	call	0xe26	; 0xe26 <H_Led_void_LedTogl>


}
    13d8:	08 95       	ret

000013da <A_Timer_0_IntExcution>:
	return 0;
}

void A_Timer_0_IntExcution(void)
{
	H_Led_void_LedTogl(GREEN_LED);
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	0e 94 13 07 	call	0xe26	; 0xe26 <H_Led_void_LedTogl>

}
    13e0:	08 95       	ret

000013e2 <main>:
int main()

{


	M_Timer_0_INT_void_SetCallback(A_Timer_0_IntExcution,TIMER_0_OVF_INT_ID);
    13e2:	8d ee       	ldi	r24, 0xED	; 237
    13e4:	99 e0       	ldi	r25, 0x09	; 9
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	0e 94 0a 01 	call	0x214	; 0x214 <M_Timer_0_INT_void_SetCallback>
	M_GIE_void_Enable(); 	// global interrupt enable
    13ec:	0e 94 b9 01 	call	0x372	; 0x372 <M_GIE_void_Enable>
	M_Timer_0_void_Init();
    13f0:	0e 94 b4 00 	call	0x168	; 0x168 <M_Timer_0_void_Init>
	H_Led_void_LedInit(GREEN_LED);
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	0e 94 26 07 	call	0xe4c	; 0xe4c <H_Led_void_LedInit>
	M_Timer_0_void_SetTime(1000);
    13fa:	68 ee       	ldi	r22, 0xE8	; 232
    13fc:	73 e0       	ldi	r23, 0x03	; 3
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <M_Timer_0_void_SetTime>
	M_Timer_0_void_Start();
    1406:	0e 94 c3 00 	call	0x186	; 0x186 <M_Timer_0_void_Start>
    140a:	ff cf       	rjmp	.-2      	; 0x140a <main+0x28>

0000140c <__mulsi3>:
    140c:	62 9f       	mul	r22, r18
    140e:	d0 01       	movw	r26, r0
    1410:	73 9f       	mul	r23, r19
    1412:	f0 01       	movw	r30, r0
    1414:	82 9f       	mul	r24, r18
    1416:	e0 0d       	add	r30, r0
    1418:	f1 1d       	adc	r31, r1
    141a:	64 9f       	mul	r22, r20
    141c:	e0 0d       	add	r30, r0
    141e:	f1 1d       	adc	r31, r1
    1420:	92 9f       	mul	r25, r18
    1422:	f0 0d       	add	r31, r0
    1424:	83 9f       	mul	r24, r19
    1426:	f0 0d       	add	r31, r0
    1428:	74 9f       	mul	r23, r20
    142a:	f0 0d       	add	r31, r0
    142c:	65 9f       	mul	r22, r21
    142e:	f0 0d       	add	r31, r0
    1430:	99 27       	eor	r25, r25
    1432:	72 9f       	mul	r23, r18
    1434:	b0 0d       	add	r27, r0
    1436:	e1 1d       	adc	r30, r1
    1438:	f9 1f       	adc	r31, r25
    143a:	63 9f       	mul	r22, r19
    143c:	b0 0d       	add	r27, r0
    143e:	e1 1d       	adc	r30, r1
    1440:	f9 1f       	adc	r31, r25
    1442:	bd 01       	movw	r22, r26
    1444:	cf 01       	movw	r24, r30
    1446:	11 24       	eor	r1, r1
    1448:	08 95       	ret

0000144a <__udivmodqi4>:
    144a:	99 1b       	sub	r25, r25
    144c:	79 e0       	ldi	r23, 0x09	; 9
    144e:	04 c0       	rjmp	.+8      	; 0x1458 <__udivmodqi4_ep>

00001450 <__udivmodqi4_loop>:
    1450:	99 1f       	adc	r25, r25
    1452:	96 17       	cp	r25, r22
    1454:	08 f0       	brcs	.+2      	; 0x1458 <__udivmodqi4_ep>
    1456:	96 1b       	sub	r25, r22

00001458 <__udivmodqi4_ep>:
    1458:	88 1f       	adc	r24, r24
    145a:	7a 95       	dec	r23
    145c:	c9 f7       	brne	.-14     	; 0x1450 <__udivmodqi4_loop>
    145e:	80 95       	com	r24
    1460:	08 95       	ret

00001462 <__divmodhi4>:
    1462:	97 fb       	bst	r25, 7
    1464:	09 2e       	mov	r0, r25
    1466:	07 26       	eor	r0, r23
    1468:	0a d0       	rcall	.+20     	; 0x147e <__divmodhi4_neg1>
    146a:	77 fd       	sbrc	r23, 7
    146c:	04 d0       	rcall	.+8      	; 0x1476 <__divmodhi4_neg2>
    146e:	49 d0       	rcall	.+146    	; 0x1502 <__udivmodhi4>
    1470:	06 d0       	rcall	.+12     	; 0x147e <__divmodhi4_neg1>
    1472:	00 20       	and	r0, r0
    1474:	1a f4       	brpl	.+6      	; 0x147c <__divmodhi4_exit>

00001476 <__divmodhi4_neg2>:
    1476:	70 95       	com	r23
    1478:	61 95       	neg	r22
    147a:	7f 4f       	sbci	r23, 0xFF	; 255

0000147c <__divmodhi4_exit>:
    147c:	08 95       	ret

0000147e <__divmodhi4_neg1>:
    147e:	f6 f7       	brtc	.-4      	; 0x147c <__divmodhi4_exit>
    1480:	90 95       	com	r25
    1482:	81 95       	neg	r24
    1484:	9f 4f       	sbci	r25, 0xFF	; 255
    1486:	08 95       	ret

00001488 <__udivmodsi4>:
    1488:	a1 e2       	ldi	r26, 0x21	; 33
    148a:	1a 2e       	mov	r1, r26
    148c:	aa 1b       	sub	r26, r26
    148e:	bb 1b       	sub	r27, r27
    1490:	fd 01       	movw	r30, r26
    1492:	0d c0       	rjmp	.+26     	; 0x14ae <__udivmodsi4_ep>

00001494 <__udivmodsi4_loop>:
    1494:	aa 1f       	adc	r26, r26
    1496:	bb 1f       	adc	r27, r27
    1498:	ee 1f       	adc	r30, r30
    149a:	ff 1f       	adc	r31, r31
    149c:	a2 17       	cp	r26, r18
    149e:	b3 07       	cpc	r27, r19
    14a0:	e4 07       	cpc	r30, r20
    14a2:	f5 07       	cpc	r31, r21
    14a4:	20 f0       	brcs	.+8      	; 0x14ae <__udivmodsi4_ep>
    14a6:	a2 1b       	sub	r26, r18
    14a8:	b3 0b       	sbc	r27, r19
    14aa:	e4 0b       	sbc	r30, r20
    14ac:	f5 0b       	sbc	r31, r21

000014ae <__udivmodsi4_ep>:
    14ae:	66 1f       	adc	r22, r22
    14b0:	77 1f       	adc	r23, r23
    14b2:	88 1f       	adc	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	1a 94       	dec	r1
    14b8:	69 f7       	brne	.-38     	; 0x1494 <__udivmodsi4_loop>
    14ba:	60 95       	com	r22
    14bc:	70 95       	com	r23
    14be:	80 95       	com	r24
    14c0:	90 95       	com	r25
    14c2:	9b 01       	movw	r18, r22
    14c4:	ac 01       	movw	r20, r24
    14c6:	bd 01       	movw	r22, r26
    14c8:	cf 01       	movw	r24, r30
    14ca:	08 95       	ret

000014cc <__divmodsi4>:
    14cc:	97 fb       	bst	r25, 7
    14ce:	09 2e       	mov	r0, r25
    14d0:	05 26       	eor	r0, r21
    14d2:	0e d0       	rcall	.+28     	; 0x14f0 <__divmodsi4_neg1>
    14d4:	57 fd       	sbrc	r21, 7
    14d6:	04 d0       	rcall	.+8      	; 0x14e0 <__divmodsi4_neg2>
    14d8:	d7 df       	rcall	.-82     	; 0x1488 <__udivmodsi4>
    14da:	0a d0       	rcall	.+20     	; 0x14f0 <__divmodsi4_neg1>
    14dc:	00 1c       	adc	r0, r0
    14de:	38 f4       	brcc	.+14     	; 0x14ee <__divmodsi4_exit>

000014e0 <__divmodsi4_neg2>:
    14e0:	50 95       	com	r21
    14e2:	40 95       	com	r20
    14e4:	30 95       	com	r19
    14e6:	21 95       	neg	r18
    14e8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ea:	4f 4f       	sbci	r20, 0xFF	; 255
    14ec:	5f 4f       	sbci	r21, 0xFF	; 255

000014ee <__divmodsi4_exit>:
    14ee:	08 95       	ret

000014f0 <__divmodsi4_neg1>:
    14f0:	f6 f7       	brtc	.-4      	; 0x14ee <__divmodsi4_exit>
    14f2:	90 95       	com	r25
    14f4:	80 95       	com	r24
    14f6:	70 95       	com	r23
    14f8:	61 95       	neg	r22
    14fa:	7f 4f       	sbci	r23, 0xFF	; 255
    14fc:	8f 4f       	sbci	r24, 0xFF	; 255
    14fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1500:	08 95       	ret

00001502 <__udivmodhi4>:
    1502:	aa 1b       	sub	r26, r26
    1504:	bb 1b       	sub	r27, r27
    1506:	51 e1       	ldi	r21, 0x11	; 17
    1508:	07 c0       	rjmp	.+14     	; 0x1518 <__udivmodhi4_ep>

0000150a <__udivmodhi4_loop>:
    150a:	aa 1f       	adc	r26, r26
    150c:	bb 1f       	adc	r27, r27
    150e:	a6 17       	cp	r26, r22
    1510:	b7 07       	cpc	r27, r23
    1512:	10 f0       	brcs	.+4      	; 0x1518 <__udivmodhi4_ep>
    1514:	a6 1b       	sub	r26, r22
    1516:	b7 0b       	sbc	r27, r23

00001518 <__udivmodhi4_ep>:
    1518:	88 1f       	adc	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	5a 95       	dec	r21
    151e:	a9 f7       	brne	.-22     	; 0x150a <__udivmodhi4_loop>
    1520:	80 95       	com	r24
    1522:	90 95       	com	r25
    1524:	bc 01       	movw	r22, r24
    1526:	cd 01       	movw	r24, r26
    1528:	08 95       	ret

0000152a <_exit>:
    152a:	f8 94       	cli

0000152c <__stop_program>:
    152c:	ff cf       	rjmp	.-2      	; 0x152c <__stop_program>
